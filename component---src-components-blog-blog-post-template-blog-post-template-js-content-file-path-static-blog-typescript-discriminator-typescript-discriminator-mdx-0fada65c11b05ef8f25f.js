"use strict";(self.webpackChunkdixitk13_github_io=self.webpackChunkdixitk13_github_io||[]).push([[4],{7685:function(n,s,a){a.r(s),a.d(s,{default:function(){return m}});var e=a(8453),t=a(6540);function o(n){const s=Object.assign({p:"p",span:"span"},(0,e.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.p,null,"Very often we have use-cases where we would like to use a single type ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Union Type</code>'}})," but still be sure about the properties inside them."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  salary<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">HumanResource</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  power<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> person<span class="token operator">:</span> Employee <span class="token operator">|</span> HumanResource<span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"But under the hood Typescript union’s are more of “common” properties inside them instead of “having all the properties”."),"\n",t.createElement(s.p,null,"So when you try and use it like:"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">let</span> helloPerson <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Employee <span class="token operator">|</span> HumanResource<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token operator">&lt;</span>only has properties common to Employee <span class="token operator">&amp;</span> HumanResource aka name<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"where as you would expect person to have ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{name, salary}</code>'}})," or ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">{name, power}</code>'}})," and choose between them depending on what person is."),"\n",t.createElement(s.p,null,"This is where discriminators come in power-play. Bear with my variable nomenclature:"),"\n",t.createElement(s.p,null,"Lets define an enum to contain both the use-cases of Person’s we have, calling it ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PersonType</code>'}})," and then define a type combining ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HumanResource</code>'}})," and ",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Employee</code>'}}),"."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">enum</span> PersonType <span class="token punctuation">{</span> <span class="token string">"EMPLOYEE"</span> <span class="token punctuation">,</span> <span class="token string">"HR"</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  type<span class="token operator">:</span> PersonType<span class="token punctuation">.</span><span class="token constant">EMPLOYEE</span>\n\tsalary<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">HumanResource</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  type<span class="token operator">:</span> PersonType<span class="token punctuation">.</span><span class="token constant">HR</span>\n  power<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> HumanResource <span class="token operator">|</span> Employee<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> person<span class="token operator">:</span> Employee <span class="token operator">|</span> HumanResource<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> helloPerson <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> PersonType<span class="token punctuation">.</span><span class="token constant">EMPLOYEE</span><span class="token operator">:</span>\n      <span class="token comment">// this gives you both name/salary since now TS understands</span>\n      <span class="token comment">// and discriminates between the two types you have</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token punctuation">{</span>gives you name<span class="token punctuation">,</span> salary<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}))}var p=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,e.RP)(),n.components);return s?t.createElement(s,n,t.createElement(o,n)):o(n)},c=a(7581),l=a(7091),r=a(2003),u=a(5443),i=a(5147),k=a(5048);function d(n){let{data:s,children:a,pageContext:o}=n;if(!o)return null;const{frontmatter:p,excerpt:c,timeToReadInWords:u}=null!=o?o:{},{title:i,date:d}=null!=p?p:{};return t.createElement(l.Cc,null,t.createElement(k.T,{title:i,description:c||"nothin",article:!0}),t.createElement(l.IF,null,t.createElement(g,null,t.createElement(y,null,i),t.createElement("p",null,"Last updated: ",d," •"," ",u&&t.createElement("span",null,u))),t.createElement(e.xA,{components:r.ol},a)))}function m(n){return t.createElement(d,n,t.createElement(p,n))}const g=c.default.div.attrs({tabIndex:0}).withConfig({displayName:"BlogPostTemplate__BlogHeader",componentId:"sc-aqkyp8-0"})(["padding:"," 0 0 0;width:100%;text-align:center;p{opacity:0.8;font-size:",';&:after{content:"";margin:'," auto;display:block;width:200px;height:2px;border-radius:50%;background-color:",";opacity:0.4;}}"],(0,u.di)(1),(0,u.di)(.75),(0,u.di)(1),i.T8),y=c.default.h1.withConfig({displayName:"BlogPostTemplate__BlogTitle",componentId:"sc-aqkyp8-1"})(["color:",';font-weight:900;font-size:40px;font-family:"Futura PT",-apple-system,sans-serif;'],i.T8)},8453:function(n,s,a){a.d(s,{RP:function(){return o},xA:function(){return c}});var e=a(6540);const t=e.createContext({});function o(n){const s=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}const p={};function c({components:n,children:s,disableParentContext:a}){let c;return c=a?"function"==typeof n?n({}):n||p:o(n),e.createElement(t.Provider,{value:c},s)}}}]);
//# sourceMappingURL=component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-typescript-discriminator-typescript-discriminator-mdx-0fada65c11b05ef8f25f.js.map