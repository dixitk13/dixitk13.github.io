{"version":3,"file":"component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-regular-expressions-regular-expressions-mdx-28ba92ffe3edbca188fa.js","mappings":"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","sources":["webpack://dixitk13.github.io/./static/blog/regular-expressions/regular-expressions.mdx","webpack://dixitk13.github.io/./src/components/Blog/BlogPostTemplate/BlogPostTemplate.js","webpack://dixitk13.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\",\n    em: \"em\",\n    ol: \"ol\",\n    blockquote: \"blockquote\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Everyone has used regular expressions sometime of life to check validation\\nof strings or you know capture a particular group of text you might be\\nlooking for.\"), \"\\n\", React.createElement(_components.p, null, \"Today I’ll go over some basics, just for refreshers, incase folks are new\\nto regular expressions and some advanced stuff which I personally found useful.\"), \"\\n\", React.createElement(_components.p, null, \"Skip directly to \", React.createElement(_components.a, {\n    href: \"#Advanced-Stuff\"\n  }, \"Advanced Section\"), \" ➡️\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"Basics\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#Basics\",\n    \"aria-label\": \"Basics permalink\",\n    className: \"auto-link-header-class before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" height=\\\"20\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"20\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Basics\"), \"\\n\", React.createElement(_components.p, null, \"A regular expression consists of a pattern and a set of flags.\\nYou could do it in following ways:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Use the contructor pattern\\ne.g.: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new RegExp(\\\"pattern\\\")</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new RegExp(\\\"pattern\\\", \\\"i\\\")</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.li, null, \"Use the short hand by providing your pattern between \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/</code>\"\n    }\n  }), \".\\nIn this specific scenario javascript considers any text between\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/</code>\"\n    }\n  }), \" as regular expressions but has some shortcomings which we’ll discuss later on.\\ne.g.: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/pattern/</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/MYPATTER/i</code>\"\n    }\n  })), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"Flags\"), \"\\n\", React.createElement(_components.p, null, \"Regular expressions have a few flags which are useful for creating powerful expressions viz.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Flags\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Ignore case, says it all\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">g</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Global search across the entire string(not just first occurrence) and return all occurrences\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">m</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Multiline mode\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">y</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Sticky positions match\")))), \"\\n\", React.createElement(_components.p, null, \"There’s more flags TBH, but the above are the most common ones I’ve come across.\"), \"\\n\", React.createElement(_components.h4, null, \"Flag examples using match\"), \"\\n\", React.createElement(_components.p, null, \"Starting with simpler examples. For the below examples, we’ll have a constant\\nparagraph like below and we’ll match against regex.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> paragraph <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'The quick brown fox jumps over the lazy dog.'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">&lt;</span>insert regex from below<span class=\\\"token operator\\\">></span> \\n<span class=\\\"token keyword\\\">const</span> found <span class=\\\"token operator\\\">=</span> paragraph<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>regex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>found<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Lets search for the word, “the” and we’ll do like so:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> regex <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">the</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"the\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>found<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">31</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Oh nice, I can find the index for the match as well, huh!\"), \"\\n\", React.createElement(_components.p, null, \"🤔 Oh but wait, how can I ignore case and match the first “The”?\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> regex <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">the</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"The\\\"</span><span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Looks like the above matched only the first “the” by ignoring case.\"), \"\\n\", React.createElement(_components.p, null, \"😶 Nah, that’s not what I was looking for.\\nWhat happens if I do a global search using a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">g</code>\"\n    }\n  }), \" flag?\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> regex <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">the</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"the\\\"</span><span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Looks like it globally searched for the second the?\"), \"\\n\", React.createElement(_components.p, null, \"😒 What happens if I do both \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">g</code>\"\n    }\n  }), \" together?\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> regex <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">the</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">ig</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"The\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the\\\"</span><span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"🤨 I see that’s what it is? Ignore case and global search together huh.\"), \"\\n\", React.createElement(_components.h3, null, \"Functions\"), \"\\n\", React.createElement(_components.p, null, \"There’s three functions in string operations where regexes are super helpful viz.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">match(/str1/)</code>\"\n    }\n  }), \": Finds a “match” for a string pattern.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">replace(/str1/, \\\"str2\\\")</code>\"\n    }\n  }), \": Finds a match and replace it with another string as the 2nd argument.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">test(/str1/)</code>\"\n    }\n  }), \": returns true/false for checking against a string pattern match.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These will be the most common used functions.\"), \"\\n\", React.createElement(_components.p, null, \"Regular expressions also have a \", React.createElement(_components.em, null, \"Shorthand\"), \" character classes, \", React.createElement(_components.em, null, \"Anchors\"), \"\\nand \", React.createElement(_components.em, null, \"Quantifiers\"), \" which all help in simplifying the targetted expressions.\"), \"\\n\", React.createElement(_components.p, null, \"We’ll see \", React.createElement(_components.em, null, \"Quantifiers\"), \", \", React.createElement(_components.em, null, \"Anchors\"), \" and \", React.createElement(_components.em, null, \"Shorthand\"), \" character examples together.\"), \"\\n\", React.createElement(_components.h3, null, \"Quantifiers\"), \"\\n\", React.createElement(_components.p, null, \"A quantifier quantifies, like how many times does a particular “expression” occur.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Quantifier\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Plus indicates one-or-more\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">*</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Star says zero-or-more, basically optional as well - the greedy boy!\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">?</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Question mark indicates, one-or-zero matches\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"|\"), React.createElement(_components.td, null, \"A logical OR ofcourse\")))), \"\\n\", React.createElement(_components.h3, null, \"Anchors\"), \"\\n\", React.createElement(_components.p, null, \"Regular expressions also have anchor elements viz.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Anchors\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">^</code>\"\n    }\n  })), React.createElement(_components.td, null, \"starts with\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">$</code>\"\n    }\n  })), React.createElement(_components.td, null, \"ends with\")))), \"\\n\", React.createElement(_components.h3, null, \"Shorthand Character classes\"), \"\\n\", React.createElement(_components.p, null, \"Character classes are usually captured by surrounding them with square braces.\"), \"\\n\", React.createElement(_components.p, null, \"If you specify \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">^</code>\"\n    }\n  }), \" inside the capture braces \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^xyz]</code>\"\n    }\n  }), \" they’d stand for negation. Yes, negation!\\nSo lets look at the character classes now:\"), \"\\n\", React.createElement(_components.p, null, \"Words and digits:\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Pattern\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[A-Z]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures any captial alphabet between A to Z.\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[a-z]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures any small letter alphabet between a to z\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[0-9]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"any digit between 0 to 9. Short hand is \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\d]</code>\"\n    }\n  }))), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\w]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures any word, in totality it stands for \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[a-zA-Z0-9]</code>\"\n    }\n  }))), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\W]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures anything that’s not a word, in totality it stands for \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^a-zA-Z0-9]</code>\"\n    }\n  }))), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\D]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"Short hand for not a digit.\")))), \"\\n\", React.createElement(_components.p, null, \"White-space stuff:\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Pattern\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\s]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures any whitespace character.\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\S]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"captures any non-whitespace character.\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.</code>\"\n    }\n  })), React.createElement(_components.td, null, \"any character of-course\")))), \"\\n\", React.createElement(_components.p, null, \"Negation stuff:\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Pattern\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^abc]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"would stand for not a, b, or c\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^apple]</code>\"\n    }\n  })), React.createElement(_components.td, null, \"would stand for not the word apple but everything apart from that word.\")))), \"\\n\", React.createElement(_components.h4, null, \"Examples\"), \"\\n\", React.createElement(_components.p, null, \"Let’s start with words and digits:\"), \"\\n\", React.createElement(_components.p, null, \"Here’s lets say you just wanna match against finding the new bootstrap version?\\nOr maybe you changed your mind are are looking for versions of frameworks\\ni.e. words followed by numbers. Below are some examples illustrating the same:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> str0 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"New Bootstrap5 is out. Older Boostrap4 isn't any good\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str0<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">(Bootstrap\\\\d)</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"Bootstrap5\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str0<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">(\\\\w+\\\\d)</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"Bootstrap5\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>str0<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">(\\\\w+\\\\d)</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"Bootstrap5\\\", \\\"Bootstrap4\\\"]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Here goes the clique US telphone number regex:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> str0 <span class=\\\"token operator\\\">=</span> \\n<span class=\\\"token string\\\">\\\"This is my nicely formatter number +1(123)-456-7890.\\\"</span> <span class=\\\"token operator\\\">+</span>\\n<span class=\\\"token string\\\">\\\"Also this can be it w/o the extension 123-456-7890.\\\"</span><span class=\\\"token operator\\\">+</span>\\n<span class=\\\"token string\\\">\\\"Rightly, I can put braces &amp; hypens wherever (123) 456-7890\\\"</span> <span class=\\\"token operator\\\">+</span>\\n<span class=\\\"token string\\\">\\\"Oh yeah, lets not forget w/o hypens: 123 456 7890\\\"</span> <span class=\\\"token operator\\\">+</span> \\n<span class=\\\"token string\\\">\\\"Or the way with periods in between like:123.456.7890\\\"</span> <span class=\\\"token operator\\\">+</span> \\n<span class=\\\"token string\\\">\\\"Gotta match'em all!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nstr0<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">((\\\\+\\\\d{1,2})?(\\\\(?\\\\d{3}\\\\)?.?\\\\d{3}.?\\\\d{4}))</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// [\\\"+1(123)-456-7890\\\", \\\"123-456-7890\\\", \\\"(123) 456-7890\\\", \\\"123 456 7890\\\", \\\"123.456.7890\\\"]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Let’s break it down one by one.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(\\\\+\\\\d{1,2})?</code>\"\n    }\n  }), \": Indicates the symbols \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(</code>\"\n    }\n  }), \" & \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  }), \" followed by a digit quantifying as occuring max twice.\\nAnd the entire thing is optional since its followed by a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">?</code>\"\n    }\n  }), \" indicating 0,1 occurrences.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\(?\\\\d{3}\\\\)?</code>\"\n    }\n  }), \": Indicates the first and last round braces as being optional by using \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\(?</code>\"\n    }\n  }), \".\\nThe first \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\</code>\"\n    }\n  }), \" is the escape character used to implicitly say look for a round brace \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">(</code>\"\n    }\n  }), \".\\nThe \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\d{3}</code>\"\n    }\n  }), \" ofcourse says look for 3 digits.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.?</code>\"\n    }\n  }), \": Here we’re looking for an optional delimiter, like a space or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\d{3}</code>\"\n    }\n  }), \": Looking for the second set of 3 digits\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.?</code>\"\n    }\n  }), \": Another optional delimiter\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\d{4}</code>\"\n    }\n  }), \": The last set of 4 digits to be captured.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"The entire expression is surrounded by round braces to allow capturing the expression.\"), \"\\n\", React.createElement(_components.p, null, \"And Voila! We have a regex capturing a phone-number, but its not free of bugs I’d assume.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s try anchors. In the below example, raining ends with would match in L02 but\\nin L03 it won’t match rain as ending. We know ofcourse why.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> str1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"it was raining\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">raining$</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">rain$</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">^it</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">^was</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Hope those examples made sense.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"Advanced-Stuff\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#Advanced-Stuff\",\n    \"aria-label\": \"Advanced Stuff permalink\",\n    className: \"auto-link-header-class before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" height=\\\"20\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"20\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Advanced Stuff\"), \"\\n\", React.createElement(_components.p, null, \"Lets start with Word Boundary and then go towards specific examples which I recently have written.\"), \"\\n\", React.createElement(_components.h3, null, \"Word Boundary\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[\\\\b]</code>\"\n    }\n  }), \": the \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">b</code>\"\n    }\n  }), \" here stands for word-boundary.\\nWhich matches three things viz. A start of the sentence, end of sentence - since they “boundaries”.\\nAnd it matches end/start of a word - meaning:\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"“a place where the word can begin like with space”\"), \"\\n\", React.createElement(_components.li, null, \"“a place where the word ends, like exclamation or another space”\\nLet’s see with examples shall we.\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GO! Bananas, Monkey?\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\bMonkey\\\\b</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Monkey </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GO! Bananas, Monkey?\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\bMonke\\\\b</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// null </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GO! Bananas, Monkey?\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\bGO\\\\b</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Go </span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"GO! Bananas, Monkey?\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\bBanana\\\\b</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// null </span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"As you see in:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"example 1: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Monkey</code>\"\n    }\n  }), \" is matched, since its ending as “word boundary”\"), \"\\n\", React.createElement(_components.li, null, \"example 3: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GO</code>\"\n    }\n  }), \" is matched, since its starting as “word boundary”\"), \"\\n\", React.createElement(_components.li, null, \"example 2/4: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Monke</code>\"\n    }\n  }), \" & \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Banana</code>\"\n    }\n  }), \" both are NOT matched, since its not ending/starting with a boundary\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Let’s take another example. Try capturing time from the below items, where time is a xx:yy two digit numbers:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> timestr1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I drink coffee at 09:00 AM and try to finish by 11:00 AM.\\\"</span> <span class=\\\"token operator\\\">+</span>\\n<span class=\\\"token string\\\">\\\"Sometimes I even do an afternoon tea around 16:00.\\\"</span><span class=\\\"token operator\\\">+</span> \\n<span class=\\\"token string\\\">\\\"But tea at18:00isn't tea, is it? Nor is 123:456PM\\\"</span> <span class=\\\"token comment\\\">// ??</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"So, looks like we are capturing two digits numbers which can be\\ncaptured by \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\d</code>\"\n    }\n  }), \" and quantifying them as \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{2}</code>\"\n    }\n  }), \" occurrences like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\d{2}</code>\"\n    }\n  }), \".\\nAnd seperate them with a \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:</code>\"\n    }\n  }), \". Cool. How about avoid the 18:00 🤔\"), \"\\n\", React.createElement(_components.p, null, \"The word boundary 😮 that will do it! Putting it all together, it looks like so:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">timestr1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\b\\\\d{2}:\\\\d{2}\\\\b</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">// => [\\\"09:00\\\", \\\"11:00\\\", \\\"16:00\\\"]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Wow 😮 Or not yet?\"), \"\\n\", React.createElement(_components.h3, null, \"The \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new RegExp</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"In basics, we talked about how there’s yet another syntax for creating a regex.\"), \"\\n\", React.createElement(_components.p, null, \"This new method comes with its own pros and cons, lets do cons first:\\nWe need to escape \", React.createElement(_components.em, null, \"Escape Characters\"), \" like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\ ^ * ( ) .</code>\"\n    }\n  }), \" and more such stuff.\"), \"\\n\", React.createElement(_components.p, null, \"But this new expression, also allows variable substitution.\\nWe’ll first see how to escape characters and then try variable substitution.\"), \"\\n\", React.createElement(_components.p, null, \"If we want to re-write the time-regex, it’ll need to escapse those \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\</code>\"\n    }\n  }), \" characters:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\\\\\b\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\b\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"g\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>timestr1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// => [\\\"09:00\\\", \\\"11:00\\\", \\\"16:00\\\"]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Not pretty I know! The second argument for the RegExp constructor is the flags we allow in.\\nIn the above example, its the globals flag to find all the time hours.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s say we wanted to capture post fix for a set of distributed system\\nnames. Really contrived example below, but stay with me.\"), \"\\n\", React.createElement(_components.p, null, \"We have lots of different systems. Each system has a unique ID\\nwhich suffixed by a UUID, which is either a number/UUID.\"), \"\\n\", React.createElement(_components.p, null, \"e.g.: \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">variable_1</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">distributedVariable_uu1_22d_334_d</code>\"\n    }\n  }), \", etc.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s try and extract that UUID:\\nWe know we’re looking for a system name followed by the ID, let’s make a postfix catcher?\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">const</span> t1<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"controller_1\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t2<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"controller_uu1-4dd-3ee-41\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t3<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"controller_8\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t4<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"shard_1\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t5<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"shard_uu1-4dd-3ee-41\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t6<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"shard\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> t7<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"shard_\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> getUUID <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> prefix<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> match <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>prefix<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">_([a-zA-Z0-9\\\\-]+)$</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> match <span class=\\\"token operator\\\">&amp;&amp;</span> match<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"controller\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => 1</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"controller\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => uu1-4dd-3ee-41</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t4<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"shard\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t5<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"shard\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> uu1-4dd-3ee-41</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t6<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"shard\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> null</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getUUID</span><span class=\\\"token punctuation\\\">(</span>t7<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"shard\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> null</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Found it useful? Still got more examples, hang tight!\"), \"\\n\", React.createElement(_components.p, null, \"Let’s say you got to parse filtering expression in log-query languages.\\nWhat’s that you’d ask? Well a super high level w/o going into the depths could be:\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Every log-query languages being offered in logging solutions across the cloud providers have a way to expression their query and a filtering expression.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Let’s see with an example. Here we are searching “logs” and would like to capture the filter expressions into variables of\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Name\"), React.createElement(_components.th, null, \"Description\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FIELD_NAME</code>\"\n    }\n  })), React.createElement(_components.td, null, \"field name or the column/key of the log\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">OP</code>\"\n    }\n  })), React.createElement(_components.td, null, \"operator viz. \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">=</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">=></code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">&lt;=</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">></code>\"\n    }\n  }), \", etc\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">VALUE</code>\"\n    }\n  })), React.createElement(_components.td, null, \"the value of the operator\")))), \"\\n\", React.createElement(_components.p, null, \"Example 1:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">search logs \\nWHERE resource.type <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"my-instance\\\"</span> \\nAND <span class=\\\"token builtin class-name\\\">type</span> <span class=\\\"token operator\\\">=</span> ERROR </code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Example 2:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">search logs2\\nWHERE resource.type <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">\\\"API\\\"</span>\\nAND api.response.code <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">400</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"This is what we’ll be extracting out of the two examples.\\nI’ve called \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1.1</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1.2</code>\"\n    }\n  }), \" for second value of expression filters.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Name\"), React.createElement(_components.th, null, \"Example 1.1\"), React.createElement(_components.th, null, \"Example 1.2\"), React.createElement(_components.th, null, \"Example 2.1\"), React.createElement(_components.th, null, \"Example 2.2\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FIELD_NAME</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">resource.type</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">type</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">resource.type</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">api.response.code</code>\"\n    }\n  }))), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">OP</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">=</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">=</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">!=</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">!=</code>\"\n    }\n  }))), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">VALUE</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\"my-instance\\\"</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\"ERROR\\\"</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">API</code>\"\n    }\n  })), React.createElement(_components.td, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">400</code>\"\n    }\n  }))))), \"\\n\", React.createElement(_components.p, null, \"How do we go about this. Let’s start with operators since we know they’ll be constants.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">OPERATORS</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"=|>=|&lt;=|!=|>|&lt;\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Next what do we allow for values? Everything? Lets use the greedy capturing mechanism?\\nSomething like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.*</code>\"\n    }\n  }), \" should work fine, looks, like quotes are optional.\"), \"\\n\", React.createElement(_components.p, null, \"Surely we’ll factor that in.\"), \"\\n\", React.createElement(_components.p, null, \"How about anything except whitespace? like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^\\\\\\\\s]+</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"How can we capture the fieldName? Looks like it can constain periods or other special stuff - lets try\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[a-zA-Z\\\\.\\\\_]+</code>\"\n    }\n  }), \"? 🤔 How does it matter what the fieldName is?\"), \"\\n\", React.createElement(_components.p, null, \"Can I just say anything except operators? like \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[^${OPERATORS}]</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"So our final regex should capture specific groups like \", React.createElement(_components.strong, null, \"fieldName\"), \", \", React.createElement(_components.strong, null, \"op\"), \" & \", React.createElement(_components.strong, null, \"value\"), \" .\\nTo capture those we’ll use the round braces \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">()</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"And it looks like so:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">([^</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">OPERATORS</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">]+)(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">OPERATORS</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)([^\\\\\\\\s]+)</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">([^${OPERATORS}]+)</code>\"\n    }\n  }), \": captures anything except operators\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">([${OPERATORS}])</code>\"\n    }\n  }), \": captures a single operator\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">([^\\\\\\\\s]+)</code>\"\n    }\n  }), \": captures everything except whitespace.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Boom! 💥\"), \"\\n\", React.createElement(_components.p, null, \"For the sake of the example, we’ll consider nothing comes after the filters\\nand \", React.createElement(_components.strong, null, \"WHERE\"), \" is the keyword specifying the start of it.\"), \"\\n\", React.createElement(_components.p, null, \"Let’s put all that together and try it:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">q1</span><span class=\\\"token operator\\\">:</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">search logs2 WHERE resource.type != \\\"API\\\" AND api.response.code = 400</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">q2</span><span class=\\\"token operator\\\">:</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">search logs WHERE resource.type = \\\"my-instance\\\" AND type = ERROR </span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">q3</span><span class=\\\"token operator\\\">:</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">search logs WHERE resource__type = \\\"my-instance\\\" AND type = ERROR </span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">WHERE</span><span class=\\\"token operator\\\">:</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"WHERE\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">AND</span><span class=\\\"token operator\\\">:</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"AND\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">OPERATORS</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"=|>=|&lt;=|!=|>|&lt;\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Filter</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">fieldName</span><span class=\\\"token operator\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">op</span><span class=\\\"token operator\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token literal-property property\\\">value</span><span class=\\\"token operator\\\">:</span> string<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> regex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RegExp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">([^</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">OPERATORS</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">]+)(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token constant\\\">OPERATORS</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)([^\\\\\\\\s]+)</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> parseFilter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>q<span class=\\\"token operator\\\">:</span> string<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Filter<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> filters <span class=\\\"token operator\\\">=</span> q<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">WHERE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>filters <span class=\\\"token operator\\\">||</span> filters<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> filterStr <span class=\\\"token operator\\\">=</span> filters<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> filterStr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">AND</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">prev<span class=\\\"token punctuation\\\">,</span> curr</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> strippedCurrent <span class=\\\"token operator\\\">=</span> curr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\"> </span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>match<span class=\\\"token punctuation\\\">,</span> fieldName<span class=\\\"token punctuation\\\">,</span> op<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> strippedCurrent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">match</span><span class=\\\"token punctuation\\\">(</span>regex<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>match<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token literal-property property\\\">filter</span><span class=\\\"token operator\\\">:</span> Filter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      fieldName<span class=\\\"token punctuation\\\">,</span> op<span class=\\\"token punctuation\\\">,</span> value\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>prev<span class=\\\"token punctuation\\\">,</span> filter<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">parseFilter</span><span class=\\\"token punctuation\\\">(</span>q1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">/**\\n * => [ \\n *  { fieldName: 'resource.type', op: '!=', value: '\\\"API\\\"' }, \\n *  { fieldName: 'api.response.code', op: '=', value: '400' } \\n * ] \\n *  */</span> \\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">parseFilter</span><span class=\\\"token punctuation\\\">(</span>q2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token comment\\\">/**\\n * [ \\n *  { fieldName: 'resource.type', op: '=', value: '\\\"my-instance\\\"' }, \\n *  { fieldName: 'type', op: '=', value: 'ERROR' } \\n * ] \\n */</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">parseFilter</span><span class=\\\"token punctuation\\\">(</span>q3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => </span>\\n<span class=\\\"token comment\\\">/**\\n * [ \\n *  { fieldName: 'resource__type', op: '=', value: '\\\"my-instance\\\"' },\\n *  { fieldName: 'type', op: '=', value: 'ERROR' } \\n * ] \\n */</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"I might add more advanced specific examples as I come across, but hopefully you found that useful.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"Future-Stuff\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#Future-Stuff\",\n    \"aria-label\": \"Future Stuff permalink\",\n    className: \"auto-link-header-class before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" height=\\\"20\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"20\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Future Stuff\"), \"\\n\", React.createElement(_components.p, null, \"I did a lot of multiline regex when I was an intern to play with logstash\\nand capturing the right amount of data from logs, but honestly I don’t remember\\nthose examples, except them being really cool 😎\"), \"\\n\", React.createElement(_components.p, null, \"Also, I haven’t played much with substitution and look-around regex stuff,\\nbut if I do - I’ll update this post :)\"), \"\\n\", React.createElement(_components.p, null, \"Until next time ☮️\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/dixitk13/code/dixitk13.github.io/static/blog/regular-expressions/regular-expressions.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {BlogWrapper, BlogMain} from \"../common\";\nimport {mdxComponents} from \"../../../common\";\nimport {rhythm} from \"../../../utils\";\nimport {fontColor} from \"../../../styles\";\nimport {SEOComponent} from \"../../SEO\";\nfunction BlogPostTemplate({data, children, pageContext}) {\n  if (!pageContext) return null;\n  const {frontmatter, excerpt, timeToReadInWords} = pageContext ?? ({});\n  const {title, date} = frontmatter ?? ({});\n  return React.createElement(BlogWrapper, null, React.createElement(SEOComponent, {\n    title: title,\n    description: excerpt || \"nothin\",\n    article: true\n  }), React.createElement(BlogMain, null, React.createElement(BlogHeader, null, React.createElement(BlogTitle, null, title), React.createElement(\"p\", null, \"Last updated: \", date, \" •\", \" \", timeToReadInWords && React.createElement(\"span\", null, timeToReadInWords))), React.createElement(MDXProvider, {\n    components: mdxComponents\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst BlogHeader = (styled.div.attrs({\n  tabIndex: 0\n}))`\n  padding: ${rhythm(1)} 0 0 0;\n  width: 100%;\n  text-align: center;\n\n  p {\n    opacity: 0.8;\n    font-size: ${rhythm(0.75)};\n    &:after {\n      content: \"\";\n      margin: ${rhythm(1)} auto;\n      display: block;\n      width: 200px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${fontColor};\n      opacity: 0.4;\n    }\n  }\n`;\nconst BlogTitle = (styled.h1)`\n  color: ${fontColor};\n  font-weight: 900;\n  font-size: 40px;\n  font-family:\n    \"Futura PT\",\n    -apple-system,\n    sans-serif;\n`;\nexport const query = graphql`\n  query blogPostByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      timeToReadInWords\n      frontmatter {\n        title\n        type\n        date(formatString: \"MMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","span","ul","li","h3","table","thead","tr","th","tbody","td","h4","em","ol","blockquote","strong","_provideComponents","components","React","href","id","style","position","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPostTemplate","_ref","data","children","pageContext","frontmatter","excerpt","timeToReadInWords","title","date","BlogWrapper","SEOComponent","description","article","BlogMain","BlogHeader","BlogTitle","MDXProvider","mdxComponents","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","styled","div","attrs","tabIndex","withConfig","displayName","componentId","rhythm","fontColor","h1","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}