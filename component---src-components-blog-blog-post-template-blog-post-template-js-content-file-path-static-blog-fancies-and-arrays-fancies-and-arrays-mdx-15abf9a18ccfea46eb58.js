"use strict";(self.webpackChunkdixitk13_github_io=self.webpackChunkdixitk13_github_io||[]).push([[264],{5221:function(n,s,a){a.r(s),a.d(s,{default:function(){return d}});var t=a(8453),p=a(6540);function e(n){const s=Object.assign({p:"p",a:"a",h2:"h2",span:"span",blockquote:"blockquote",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li"},(0,t.RP)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"In this article we’ll go thro some array functions and then on-to some\nstuff which I consider fancy stuff.\nJump to ",p.createElement(s.a,{href:"#Fancies"},"fancy stuff")),"\n",p.createElement(s.h2,{id:"Arrays",style:{position:"relative"}},p.createElement(s.a,{href:"#Arrays","aria-label":"Arrays permalink",className:"auto-link-header-class before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" height="20" version="1.1" viewBox="0 0 16 16" width="20"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Arrays"),"\n",p.createElement(s.p,null,"Let’s try going through some useful array functions:"),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"filter"),"\n"),"\n",p.createElement(s.p,null,"The simplest array function - ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">filter</code>'}}),". It will filter the elements of the array if\ncondition is true - and will return a filtered array."),"\n",p.createElement(s.p,null,"Let’s try the simplest of functions i.e. to find elements which are even using\nan inline function and a function which sits outside like ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isEven</code>'}})," defined below."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3]</span>\n\n<span class="token keyword">const</span> isEven <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4]</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"The callback function provided by ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">filter</code>'}})," has an optional parameter which lets\nyou access the position, so - lets try another function which tells us\nelements which are at even positions."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> arr2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">isEven</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 7]</span>\n\n<span class="token keyword">const</span> isEvenIndex <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>_<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEvenIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 7]</span>\n\n<span class="token comment">// similarly w/ objects</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">KV</span></span> <span class="token punctuation">{</span>\n  k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  v<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> arr3<span class="token operator">:</span> <span class="token constant">KV</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> k<span class="token operator">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> k<span class="token operator">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> k<span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> k<span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> v<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{k: "y", v: 4}]</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"findIndex"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">findIndex</code>'}})," returns the index of the first element in the array where the\ncallback function provided returns true.\nElse, it returns -1, meaning no such element was found."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isPerfectSquareRoot</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isPerfectCubeRoot</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPerfectSquareRoot</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPerfectCubeRoot</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isPerfectCubeRoot</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isPerfectSquareRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 - which is 4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isPerfectCubeRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1 - meaning not present</span>\n\n<span class="token keyword">const</span> <span class="token literal-property property">nine</span><span class="token operator">:</span> <span class="token constant">KV</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token literal-property property">arr3</span><span class="token operator">:</span> <span class="token constant">KV</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> nine<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>v <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>v <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\n\n<span class="token comment">// also not to forget some object equality stuff</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">===</span> <span class="token punctuation">{</span> <span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">===</span> nine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"some"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">some</code>'}})," is used as an indicator to test and find out if a certain condition\nexists inside the array. It also breaks out as soon as the condition is met\ninstead of travesing the entire array."),"\n",p.createElement(s.p,null,"Refer ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">includes</code>'}})," to find out how its different than ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">some</code>'}}),"."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"includes"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">includes</code>'}})," finds out if a particular element exists inside the array."),"\n",p.createElement(s.p,null,"It’s ",p.createElement(s.strong,null,"different")," than ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">some</code>'}})," in the sense that it won’t allow for custom\nfunctions which check the presence of an element."),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">includes</code>'}})," is also similar to ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">indexOf</code>'}})," and behaves like a short-hand."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> strs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">"The"</span><span class="token punctuation">,</span>\n  <span class="token string">"quick"</span><span class="token punctuation">,</span>\n  <span class="token string">"brown"</span><span class="token punctuation">,</span>\n  <span class="token string">"fox"</span><span class="token punctuation">,</span>\n  <span class="token string">"jumps"</span><span class="token punctuation">,</span>\n  <span class="token string">"over"</span><span class="token punctuation">,</span>\n  <span class="token string">"the"</span><span class="token punctuation">,</span>\n  <span class="token string">"lazy"</span><span class="token punctuation">,</span>\n  <span class="token string">"fox"</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"fox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"nox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token keyword">const</span> myIncludes <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ele<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myIncludes</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myIncludes</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token string">"nox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"concat"),"\n"),"\n",p.createElement(s.p,null,"A simple ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">concat</code>'}})," function which will concat two arrays and return\na new array w/o changing the original array."),"\n",p.createElement(s.p,null,"Important thing to note is ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">concat</code>'}})," will not flatten nested arrays."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\', \'c\', \'d\', \'e\', \'b\']</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\', \'c\', \'d\', \'e\', \'b\', \'x\', \'a\', \'y\']</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\', \'c\']</span>\n\n<span class="token keyword">const</span> x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> x2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\', \'x\', [\'y\', \'z\']]</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"forEach"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forEach</code>'}})," function is used to iterate over each element of the array as the name\nspecifies, but it won’t return anything and is void."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> => </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// prints</span>\n<span class="token comment">// index: 0, value: 7 => index:1, value: 5 => index: 2, value: 6 => index: 3, value: 9 =></span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"It also skips calling itself for empty elements."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[index: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] => </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// nothing prints!</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Another point to note about the ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forEach</code>'}})," callback is that the callback\nfunctions can’t be async and won’t wait for async operations to finish."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fileDates <span class="token operator">=</span> <span class="token function">readFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// doens\'t work and won\'t wait for generateForDate to finish</span>\nfileDates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">generateForDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// works, below is the right way</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> date <span class="token keyword">of</span> fileDates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">generateForDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"every"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">every</code>'}})," will make sure “every” element in the array will satisfy the callback condition.\nIf yes - it returns a boolean value.\nElse a falsy value to indicate the presence of an element where the callback\nfunction doesn’t get satisfied."),"\n",p.createElement(s.p,null,"And yes it’ll also take into consideration sparse arrays."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"find"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">find</code>'}})," is very similar to ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">some</code>'}})," - it looks for the presence of the element\nand breaks out as soon as it finds the truthy element and allows a function\nfor checking the presence of the element."),"\n",p.createElement(s.p,null,"But instead of returning true/false it’ll return the actual element!\nIf not found, it’ll return undefined."),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">find</code>'}})," also will look for the first element - so be sure to have that\nconditional logic in mind when using the function."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">===</span> <span class="token string">"nox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">===</span> <span class="token string">"fox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fox (first fox not the second fox)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"fo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fox (first fox not the second fox)</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"reverse"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reverse</code>'}})," will reverse an array in-place.\n",p.createElement(s.strong,null,"in-place")," that’s right - so it’ll modify the original array."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 5, 3]</span>\n\n<span class="token keyword">const</span> rev<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 5, 1]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 5, 1]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rev <span class="token operator">===</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"map"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">map</code>'}})," is a very powerful function which like ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">forEach</code>'}})," loops over every element in\nthe array and returns a new ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mapped</code>'}})," element for every element as returned via the callback function."),"\n",p.createElement(s.p,null,"It doesn’t touch the original array.\nIf nothing is returned from the map callback, it’ll be an undefined element inside\nthe returned array."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 10, 6]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ { x: 2 }, { x: 10 }, { x: 6 } ]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> idx<span class="token operator">:</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [ { x: 2, idx: 0 }, { x: 10, idx: 1 }, { x: 6, idx: 2 } ]</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined, undefined, undefined]</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"flat"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">flat</code>'}})," will flatten the elements into a f-l-a-t structure and takes another\nargument to determine how deep the function should recursively flatten."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// type DeepArray&lt;T> = Array&lt;T> | Array&lt;DeepArray&lt;T> | T>;</span>\n\n<span class="token keyword">const</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'a\', \'b\', [ \'c\', \'d\' ] ]</span>\n\n<span class="token keyword">const</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'a\', \'b\', \'c\', \'d\', [ \'e\', \'f\' ] ]</span>\n\n<span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' ]</span>\n\n<span class="token keyword">const</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"j"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [ \'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\' ]</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"reduce"),"\n"),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduce</code>'}})," is yet another powerful function which will let you loop over\nthe entire array and has a concept of accumulator which accumulates results\nover the array."),"\n",p.createElement(s.p,null,"Simplest reduce function you’ll see is addition of array elements. At each step the\naccumulator adds the element into itself and starts at 0 which is the starting\npoint."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></code></pre></div>'}}),"\n",p.createElement(s.table,null,p.createElement(s.thead,null,p.createElement(s.tr,null,p.createElement(s.th,null,"index"),p.createElement(s.th,null,"value"),p.createElement(s.th,null,"accumulator"))),p.createElement(s.tbody,null,p.createElement(s.tr,null,p.createElement(s.td,null,"0"),p.createElement(s.td,null,"1"),p.createElement(s.td,null,"0 + 1 = 1")),p.createElement(s.tr,null,p.createElement(s.td,null,"1"),p.createElement(s.td,null,"4"),p.createElement(s.td,null,"1 + 4 = 5")),p.createElement(s.tr,null,p.createElement(s.td,null,"2"),p.createElement(s.td,null,"6"),p.createElement(s.td,null,"5 + 6 = 11")))),"\n",p.createElement(s.p,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduce</code>'}})," is very powerful and many people use it to create complex-objects out\nor even changing the structure of elements. Ideally, I try to use ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduce</code>'}})," only when I want my function to\nreturn a singular element."),"\n",p.createElement(s.p,null,"Let’s look at an example below for ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduce</code>'}})," where we’ll count the value of elements."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">summation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">objects</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> objects<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> objItem</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>acc<span class="token punctuation">,</span>\n      <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objItem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n        <span class="token punctuation">(</span><span class="token parameter">keyAcc<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>keyAcc<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> objItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>acc<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">summation</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x: 2, y: 3, z: 5, a: 1 }</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Let’s walk thro this in brief via the same tabular approach:"),"\n",p.createElement(s.table,null,p.createElement(s.thead,null,p.createElement(s.tr,null,p.createElement(s.th,null,"index"),p.createElement(s.th,null,"value"),p.createElement(s.th,null,"accumulator"))),p.createElement(s.tbody,null,p.createElement(s.tr,null,p.createElement(s.td,null,"0"),p.createElement(s.td,null,"{ x: 2, y: 1 }"),p.createElement(s.td,null,"{ x: 2, y: 1 }")),p.createElement(s.tr,null,p.createElement(s.td,null,"1"),p.createElement(s.td,null,"{ y: 2, z: 4 }"),p.createElement(s.td,null,"{ x: 2, y: 3, z: 4 }")),p.createElement(s.tr,null,p.createElement(s.td,null,"2"),p.createElement(s.td,null,"{ z: 1, a: 1 }"),p.createElement(s.td,null,"{ x: 2, y: 3, z: 5, a: 1 }")))),"\n",p.createElement(s.p,null,"We also have a function called ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reduceRight</code>'}})," which runs from right-side of\nthe array instead of from left."),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"from/of/fill"),"\n"),"\n",p.createElement(s.p,null,"So I’d like to discuss 3 Array functions viz. ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">from</code>'}}),", ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">of</code>'}})," and ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fill</code>'}})," together:"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">from</code>'}})," returns a shallow copy from an array-like structure."),"\n"),"\n",p.createElement(s.p,null,"It also has a length property which you could set and get an\narray of that length and map with a callback function."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["t", "h", "e"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["1"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'undefined\', \'undefined\', \'undefined\']</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2]</span></code></pre></div>'}}),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">of</code>'}})," creates an Array from the number of arguments provided"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>\nArray<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", "b"]</span></code></pre></div>'}}),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fill</code>'}})," fills the array in-place and returns the modified array back"),"\n"),"\n",p.createElement(s.p,null,"It has the mandatory first parameter which is what gets filled in the entire array.\nIt also has start(defaults to 0) and end (defaults to length of array)\nparameters which are inclusive, exclusive respectively."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 0, 3, 4]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 5, 5, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 10, 10, 10]</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"sort"),"\n"),"\n",p.createElement(s.p,null,"A simple ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sort</code>'}})," function assumes the natural ordering and orders the elements\nin ascending order for numeric elements by itself."),"\n",p.createElement(s.p,null,"An important fact to remember is, sorting is ",p.createElement(s.strong,null,"in-place")," and default ordering\nconverts numbers to strings and sorts them - checkout the 70 in the below example."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 6, 7, 9]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 6, 70, 9]</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Subtracting the numbers and converting them is also something lots of people do\nto maintain ordering like below."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 6, 9, 70]</span></code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"Fancies",style:{position:"relative"}},p.createElement(s.a,{href:"#Fancies","aria-label":"Fancies permalink",className:"auto-link-header-class before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" height="20" version="1.1" viewBox="0 0 16 16" width="20"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Fancies"),"\n",p.createElement(s.p,null,"Let’s look at some fun stuff as well:"),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"fisher-yates-shuffle"),"\n"),"\n",p.createElement(s.p,null,"The famous Fisher Yates shuffle algorithm. I won’t dive much into the working\nand logic of it, but briefly state it out:"),"\n",p.createElement(s.p,null,"Algorithm:"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"init a variable called i as ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">let i = array.length</code>'}})),"\n",p.createElement(s.li,null,"Pick an element randomly from 0 - i, lets call it ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">j</code>'}})),"\n",p.createElement(s.li,null,"Swap the ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," element with this picked element ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">j</code>'}})),"\n",p.createElement(s.li,null,"Shrink the size of picking the elements, so ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i--</code>'}}),". Repeat from step 2."),"\n"),"\n",p.createElement(s.p,null,"This ensures “unbaised permutation”. Wikipedia is a better teacher than I am TBH - but below is the code"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fisherYatesShuffle <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> temp<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// while there remain elements to shuffle</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Pick a remaining element</span>\n    j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// And swap it with the current element</span>\n    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> array<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fisherYatesShuffle</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["I", "J", "A", "G", "C", "E", "H", "D", "F", "B"];</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Great links to read about Fisher Yates Algorithm:"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array",rel:"nofollow noopener noreferrer external"},"https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array")),"\n",p.createElement(s.li,null,p.createElement(s.a,{href:"https://bost.ocks.org/mike/shuffle/",rel:"nofollow noopener noreferrer external"},"https://bost.ocks.org/mike/shuffle/")),"\n"),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"Letter Generate function"),"\n"),"\n",p.createElement(s.p,null,"We all know what’s the ascii for character ‘A’, its numeric 65.\nBut how do we check that in JS?"),"\n",p.createElement(s.p,null,"Well luckily function called ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">charCodeAt</code>'}})," tells us what’s the\nascii code for the same and ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">String.fromCharCode</code>'}})," tells us the\nreverse mapping for it."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "A";</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Now let’s try and write a function which gives us letters from ‘A’\nto a particular letter - which might look like this:"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> generateLetters <span class="token operator">=</span> <span class="token punctuation">(</span>startAscii<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> letters<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span>\n    String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>startAscii <span class="token operator">+</span> index<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> letters<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">generateLetters</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'A\']</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">generateLetters</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'A\', \'B\', \'C\']</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">generateLetters</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'a\', \'b\']</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"PQ"),"\n"),"\n",p.createElement(s.p,null,"Let’s look at a naive Priority Queue implementation. Tries to treat an sorted\narray as PQ and add/return values based on it for offer/poll respectively."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Tuple</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> freq</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  val <span class="token operator">=</span> val<span class="token punctuation">;</span>\n  freq <span class="token operator">=</span> freq<span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> val<span class="token punctuation">,</span> freq <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    toString<span class="token punctuation">,</span>\n    val<span class="token punctuation">,</span>\n    freq<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token constant">PQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lst<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    lst<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span>freq <span class="token operator">-</span> y<span class="token punctuation">.</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> val <span class="token operator">=</span> lst<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> lst<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    offer<span class="token punctuation">,</span>\n    poll<span class="token punctuation">,</span>\n    isEmpty<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"element "</span> <span class="token operator">+</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// element {"val":8,"freq":0.0407238060411359}</span>\n<span class="token comment">// element {"val":7,"freq":0.23583407354383357}</span>\n<span class="token comment">// element {"val":6,"freq":0.24117641809409118}</span>\n<span class="token comment">// element {"val":1,"freq":0.33821747985965533}</span>\n<span class="token comment">// element {"val":9,"freq":0.40546659473293256}</span>\n<span class="token comment">// element {"val":2,"freq":0.43895218033432615}</span>\n<span class="token comment">// element {"val":5,"freq":0.5993946400967103}</span>\n<span class="token comment">// element {"val":4,"freq":0.7927179659616519}</span>\n<span class="token comment">// element {"val":0,"freq":0.887932230384556}</span>\n<span class="token comment">// element {"val":3,"freq":0.999269467360683}</span></code></pre></div>'}}),"\n",p.createElement(s.blockquote,null,"\n",p.createElement(s.p,null,"custom-iterator"),"\n"),"\n",p.createElement(s.p,null,"A custom JS iterator. JS offers a iterator which you can attach into\nthe actual object like so:"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">nums<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> iteratorFn<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Now you can use this object in ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for..of</code>'}}),", ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for..in</code>'}})," and ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">...</code>'}})," spread statements."),"\n",p.createElement(s.p,null,"The function iterator has only two gotchas I’d say:"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"return done as false and a value. Use closure values to find position of value."),"\n",p.createElement(s.li,null,"return done as true with undefined value, when truly finished"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">iterator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Get all the values in an array</span>\n\n  <span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Store the current array key and value being iterated in the key</span>\n  <span class="token keyword">let</span> currentKeyIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> currentValueIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Implementation of next()</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> currentValArray <span class="token operator">=</span> values<span class="token punctuation">[</span>currentValueIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>currentKeyIndex <span class="token operator">&lt;</span> currentValArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// reset</span>\n        currentValueIndex<span class="token operator">++</span><span class="token punctuation">;</span>\n        currentKeyIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>currentValueIndex <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">value</span><span class="token operator">:</span> values<span class="token punctuation">[</span>currentValueIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>currentKeyIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nnums<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> iterator<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3, 4, 5, 6, 9, 10, 11</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3, 4, 5, 6, 9, 10, 11</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span></code></pre></div>'}}))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.RP)(),n.components);return s?p.createElement(s,n,p.createElement(e,n)):e(n)},c=a(7581),l=a(7091),u=a(2003),i=a(5443),r=a(5147),k=a(5048);function m(n){let{data:s,children:a,pageContext:e}=n;if(!e)return null;const{frontmatter:o,excerpt:c,timeToReadInWords:i}=null!=e?e:{},{title:r,date:m}=null!=o?o:{};return p.createElement(l.Cc,null,p.createElement(k.T,{title:r,description:c||"nothin",article:!0}),p.createElement(l.IF,null,p.createElement(g,null,p.createElement(f,null,r),p.createElement("p",null,"Last updated: ",m," •"," ",i&&p.createElement("span",null,i))),p.createElement(t.xA,{components:u.ol},a)))}function d(n){return p.createElement(m,n,p.createElement(o,n))}const g=c.default.div.attrs({tabIndex:0}).withConfig({displayName:"BlogPostTemplate__BlogHeader",componentId:"sc-aqkyp8-0"})(["padding:"," 0 0 0;width:100%;text-align:center;p{opacity:0.8;font-size:",';&:after{content:"";margin:'," auto;display:block;width:200px;height:2px;border-radius:50%;background-color:",";opacity:0.4;}}"],(0,i.di)(1),(0,i.di)(.75),(0,i.di)(1),r.T8),f=c.default.h1.withConfig({displayName:"BlogPostTemplate__BlogTitle",componentId:"sc-aqkyp8-1"})(["color:",';font-weight:900;font-size:40px;font-family:"Futura PT",-apple-system,sans-serif;'],r.T8)},8453:function(n,s,a){a.d(s,{RP:function(){return e},xA:function(){return c}});var t=a(6540);const p=t.createContext({});function e(n){const s=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}const o={};function c({components:n,children:s,disableParentContext:a}){let c;return c=a?"function"==typeof n?n({}):n||o:e(n),t.createElement(p.Provider,{value:c},s)}}}]);
//# sourceMappingURL=component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-fancies-and-arrays-fancies-and-arrays-mdx-15abf9a18ccfea46eb58.js.map