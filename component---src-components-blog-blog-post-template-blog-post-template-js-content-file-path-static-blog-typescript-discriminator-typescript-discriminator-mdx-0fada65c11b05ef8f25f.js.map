{"version":3,"file":"component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-typescript-discriminator-typescript-discriminator-mdx-0fada65c11b05ef8f25f.js","mappings":"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","sources":["webpack://dixitk13.github.io/./static/blog/typescript-discriminator/typescript-discriminator.mdx","webpack://dixitk13.github.io/./src/components/Blog/BlogPostTemplate/BlogPostTemplate.js","webpack://dixitk13.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Very often we have use-cases where we would like to use a single type \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Union Type</code>\"\n    }\n  }), \" but still be sure about the properties inside them.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Employee</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  salary<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">HumanResource</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  power<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> person<span class=\\\"token operator\\\">:</span> Employee <span class=\\\"token operator\\\">|</span> HumanResource<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"But under the hood Typescript union’s are more of “common” properties inside them instead of “having all the properties”.\"), \"\\n\", React.createElement(_components.p, null, \"So when you try and use it like:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">let</span> helloPerson <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token operator\\\">:</span> Employee <span class=\\\"token operator\\\">|</span> HumanResource<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">&lt;</span>only has properties common to Employee <span class=\\\"token operator\\\">&amp;</span> HumanResource aka name<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"where as you would expect person to have \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{name, salary}</code>\"\n    }\n  }), \" or \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">{name, power}</code>\"\n    }\n  }), \" and choose between them depending on what person is.\"), \"\\n\", React.createElement(_components.p, null, \"This is where discriminators come in power-play. Bear with my variable nomenclature:\"), \"\\n\", React.createElement(_components.p, null, \"Lets define an enum to contain both the use-cases of Person’s we have, calling it \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PersonType</code>\"\n    }\n  }), \" and then define a type combining \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">HumanResource</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Employee</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">enum</span> PersonType <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"EMPLOYEE\\\"</span> <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"HR\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Employee</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  type<span class=\\\"token operator\\\">:</span> PersonType<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">EMPLOYEE</span>\\n\\tsalary<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">HumanResource</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  type<span class=\\\"token operator\\\">:</span> PersonType<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">HR</span>\\n  power<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Person</span> <span class=\\\"token operator\\\">=</span> HumanResource <span class=\\\"token operator\\\">|</span> Employee<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> person<span class=\\\"token operator\\\">:</span> Employee <span class=\\\"token operator\\\">|</span> HumanResource<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> helloPerson <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token operator\\\">:</span> Person<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> PersonType<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">EMPLOYEE</span><span class=\\\"token operator\\\">:</span>\\n      <span class=\\\"token comment\\\">// this gives you both name/salary since now TS understands</span>\\n      <span class=\\\"token comment\\\">// and discriminates between the two types you have</span>\\n      <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>gives you name<span class=\\\"token punctuation\\\">,</span> salary<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/dixitk13/code/dixitk13.github.io/static/blog/typescript-discriminator/typescript-discriminator.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {BlogWrapper, BlogMain} from \"../common\";\nimport {mdxComponents} from \"../../../common\";\nimport {rhythm} from \"../../../utils\";\nimport {fontColor} from \"../../../styles\";\nimport {SEOComponent} from \"../../SEO\";\nfunction BlogPostTemplate({data, children, pageContext}) {\n  if (!pageContext) return null;\n  const {frontmatter, excerpt, timeToReadInWords} = pageContext ?? ({});\n  const {title, date} = frontmatter ?? ({});\n  return React.createElement(BlogWrapper, null, React.createElement(SEOComponent, {\n    title: title,\n    description: excerpt || \"nothin\",\n    article: true\n  }), React.createElement(BlogMain, null, React.createElement(BlogHeader, null, React.createElement(BlogTitle, null, title), React.createElement(\"p\", null, \"Last updated: \", date, \" •\", \" \", timeToReadInWords && React.createElement(\"span\", null, timeToReadInWords))), React.createElement(MDXProvider, {\n    components: mdxComponents\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst BlogHeader = (styled.div.attrs({\n  tabIndex: 0\n}))`\n  padding: ${rhythm(1)} 0 0 0;\n  width: 100%;\n  text-align: center;\n\n  p {\n    opacity: 0.8;\n    font-size: ${rhythm(0.75)};\n    &:after {\n      content: \"\";\n      margin: ${rhythm(1)} auto;\n      display: block;\n      width: 200px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${fontColor};\n      opacity: 0.4;\n    }\n  }\n`;\nconst BlogTitle = (styled.h1)`\n  color: ${fontColor};\n  font-weight: 900;\n  font-size: 40px;\n  font-family:\n    \"Futura PT\",\n    -apple-system,\n    sans-serif;\n`;\nexport const query = graphql`\n  query blogPostByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      timeToReadInWords\n      frontmatter {\n        title\n        type\n        date(formatString: \"MMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","_provideComponents","components","React","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPostTemplate","_ref","data","children","pageContext","frontmatter","excerpt","timeToReadInWords","title","date","BlogWrapper","SEOComponent","description","article","BlogMain","BlogHeader","BlogTitle","MDXProvider","mdxComponents","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","styled","div","attrs","tabIndex","withConfig","displayName","componentId","rhythm","fontColor","h1","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}