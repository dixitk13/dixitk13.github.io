{"version":3,"file":"component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-draft-pull-requests-draft-pull-requests-mdx-d154c05fcf6feaaa2165.js","mappings":"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","sources":["webpack://dixitk13.github.io/./static/blog/draft-pull-requests/draft-pull-requests.mdx","webpack://dixitk13.github.io/./src/components/Blog/BlogPostTemplate/BlogPostTemplate.js","webpack://dixitk13.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    span: \"span\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.\"), \"\\n\", React.createElement(_components.p, null, \"I’ve always felt that need to entitle my PR’s with:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"[DO-NOT-MERGE]:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.\"), \"\\n\", React.createElement(_components.li, null, \"Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.\"), \"\\n\", React.createElement(_components.li, null, \"Or I need a build out prod version of my code\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"[NEEDS-TESTING]: when I’ve finished writing the code:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"but its 12am\"), \"\\n\", React.createElement(_components.li, null, \"or maybe my codebase lacks e2e for all the other code surrounding mine.\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"[DRAFT] is my rescuer here where any teammate isn’t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions\"), \"\\n\", React.createElement(_components.p, null, \"Ref: \", React.createElement(_components.a, {\n    href: \"https://github.blog/2019-02-14-introducing-draft-pull-requests/\",\n    rel: \"nofollow noopener noreferrer external\"\n  }, \"https://github.blog/2019-02-14-introducing-draft-pull-requests/\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"What-I-follow-as-nomenclature-for-Pull-Requests\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#What-I-follow-as-nomenclature-for-Pull-Requests\",\n    \"aria-label\": \"What I follow as nomenclature for Pull Requests permalink\",\n    className: \"auto-link-header-class before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" height=\\\"20\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"20\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What I follow as nomenclature for Pull Requests:\"), \"\\n\", React.createElement(_components.p, null, \"Most of my PR’s follow a nomenclature for branch naming as well, call me victim of OCD but that’s me!\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">&lt;username>/hotfix/&lt;branch-code-name></code>\"\n    }\n  }), \" : for hot-fixes of course\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">&lt;username>/changes/&lt;branch-code-name></code>\"\n    }\n  }), \" : for changes/improvements\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">&lt;username>/feature/&lt;branch-code-name></code>\"\n    }\n  }), \": for feature updates\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that’s the best way to do your nomenclature TBH.\"), \"\\n\", React.createElement(_components.p, null, \"I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you’d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.\"), \"\\n\", React.createElement(_components.p, null, \"A good read about how I adopted the above \", React.createElement(_components.a, {\n    href: \"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\",\n    rel: \"nofollow noopener noreferrer external\"\n  }, \"here\")), \"\\n\", React.createElement(_components.p, null, \"Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[\", React.createElement(_components.a, {\n    href: \"https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch\",\n    rel: \"nofollow noopener noreferrer external\"\n  }, \"https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch\"), \"],\", \" but meh - email’s not going to live long hopefully.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">git</span> format-patch <span class=\\\"token operator\\\">&lt;</span>branch<span class=\\\"token operator\\\">></span> <span class=\\\"token parameter variable\\\">--stdout</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Adopt \", React.createElement(_components.strong, null, \"rebase\"), \". It seems to keep the history clean, coming from the \", React.createElement(_components.strong, null, \"merge\"), \" guy who used merge for several years now :)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/dixitk13/code/dixitk13.github.io/static/blog/draft-pull-requests/draft-pull-requests.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {BlogWrapper, BlogMain} from \"../common\";\nimport {mdxComponents} from \"../../../common\";\nimport {rhythm} from \"../../../utils\";\nimport {fontColor} from \"../../../styles\";\nimport {SEOComponent} from \"../../SEO\";\nfunction BlogPostTemplate({data, children, pageContext}) {\n  if (!pageContext) return null;\n  const {frontmatter, excerpt, timeToReadInWords} = pageContext ?? ({});\n  const {title, date} = frontmatter ?? ({});\n  return React.createElement(BlogWrapper, null, React.createElement(SEOComponent, {\n    title: title,\n    description: excerpt || \"nothin\",\n    article: true\n  }), React.createElement(BlogMain, null, React.createElement(BlogHeader, null, React.createElement(BlogTitle, null, title), React.createElement(\"p\", null, \"Last updated: \", date, \" •\", \" \", timeToReadInWords && React.createElement(\"span\", null, timeToReadInWords))), React.createElement(MDXProvider, {\n    components: mdxComponents\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst BlogHeader = (styled.div.attrs({\n  tabIndex: 0\n}))`\n  padding: ${rhythm(1)} 0 0 0;\n  width: 100%;\n  text-align: center;\n\n  p {\n    opacity: 0.8;\n    font-size: ${rhythm(0.75)};\n    &:after {\n      content: \"\";\n      margin: ${rhythm(1)} auto;\n      display: block;\n      width: 200px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${fontColor};\n      opacity: 0.4;\n    }\n  }\n`;\nconst BlogTitle = (styled.h1)`\n  color: ${fontColor};\n  font-weight: 900;\n  font-size: 40px;\n  font-family:\n    \"Futura PT\",\n    -apple-system,\n    sans-serif;\n`;\nexport const query = graphql`\n  query blogPostByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      timeToReadInWords\n      frontmatter {\n        title\n        type\n        date(formatString: \"MMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","a","h2","span","strong","_provideComponents","components","React","href","rel","id","style","position","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","BlogPostTemplate","_ref","data","children","pageContext","frontmatter","excerpt","timeToReadInWords","title","date","BlogWrapper","SEOComponent","description","article","BlogMain","BlogHeader","BlogTitle","MDXProvider","mdxComponents","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","styled","div","attrs","tabIndex","withConfig","displayName","componentId","rhythm","fontColor","h1","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}