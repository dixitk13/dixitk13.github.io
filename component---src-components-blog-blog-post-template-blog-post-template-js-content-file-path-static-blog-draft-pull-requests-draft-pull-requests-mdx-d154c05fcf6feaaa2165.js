"use strict";(self.webpackChunkdixitk13_github_io=self.webpackChunkdixitk13_github_io||[]).push([[930],{1971:function(e,t,n){n.r(t),n.d(t,{default:function(){return p}});var l=n(8453),a=n(6540);function o(e){const t=Object.assign({p:"p",ul:"ul",li:"li",a:"a",h2:"h2",span:"span",strong:"strong"},(0,l.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements."),"\n",a.createElement(t.p,null,"I’ve always felt that need to entitle my PR’s with:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"[DO-NOT-MERGE]:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message."),"\n",a.createElement(t.li,null,"Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for."),"\n",a.createElement(t.li,null,"Or I need a build out prod version of my code"),"\n"),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"[NEEDS-TESTING]: when I’ve finished writing the code:"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"but its 12am"),"\n",a.createElement(t.li,null,"or maybe my codebase lacks e2e for all the other code surrounding mine.\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night."),"\n"),"\n"),"\n"),"\n",a.createElement(t.p,null,"[DRAFT] is my rescuer here where any teammate isn’t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions"),"\n",a.createElement(t.p,null,"Ref: ",a.createElement(t.a,{href:"https://github.blog/2019-02-14-introducing-draft-pull-requests/",rel:"nofollow noopener noreferrer external"},"https://github.blog/2019-02-14-introducing-draft-pull-requests/")),"\n",a.createElement(t.h2,{id:"What-I-follow-as-nomenclature-for-Pull-Requests",style:{position:"relative"}},a.createElement(t.a,{href:"#What-I-follow-as-nomenclature-for-Pull-Requests","aria-label":"What I follow as nomenclature for Pull Requests permalink",className:"auto-link-header-class before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" height="20" version="1.1" viewBox="0 0 16 16" width="20"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"What I follow as nomenclature for Pull Requests:"),"\n",a.createElement(t.p,null,"Most of my PR’s follow a nomenclature for branch naming as well, call me victim of OCD but that’s me!"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;username>/hotfix/&lt;branch-code-name></code>'}})," : for hot-fixes of course"),"\n",a.createElement(t.li,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;username>/changes/&lt;branch-code-name></code>'}})," : for changes/improvements"),"\n",a.createElement(t.li,null,a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;username>/feature/&lt;branch-code-name></code>'}}),": for feature updates"),"\n"),"\n",a.createElement(t.p,null,"where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that’s the best way to do your nomenclature TBH."),"\n",a.createElement(t.p,null,"I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you’d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish."),"\n",a.createElement(t.p,null,"A good read about how I adopted the above ",a.createElement(t.a,{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",rel:"nofollow noopener noreferrer external"},"here")),"\n",a.createElement(t.p,null,"Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[",a.createElement(t.a,{href:"https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch",rel:"nofollow noopener noreferrer external"},"https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch"),"],"," but meh - email’s not going to live long hopefully."),"\n",a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">git</span> format-patch <span class="token operator">&lt;</span>branch<span class="token operator">></span> <span class="token parameter variable">--stdout</span></code></pre></div>'}}),"\n",a.createElement(t.p,null,"Adopt ",a.createElement(t.strong,null,"rebase"),". It seems to keep the history clean, coming from the ",a.createElement(t.strong,null,"merge")," guy who used merge for several years now :)"))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.RP)(),e.components);return t?a.createElement(t,e,a.createElement(o,e)):o(e)},s=n(7581),i=n(7091),c=n(2003),u=n(5443),m=n(5147),h=n(5048);function d(e){let{data:t,children:n,pageContext:o}=e;if(!o)return null;const{frontmatter:r,excerpt:s,timeToReadInWords:u}=null!=o?o:{},{title:m,date:d}=null!=r?r:{};return a.createElement(i.Cc,null,a.createElement(h.T,{title:m,description:s||"nothin",article:!0}),a.createElement(i.IF,null,a.createElement(g,null,a.createElement(f,null,m),a.createElement("p",null,"Last updated: ",d," •"," ",u&&a.createElement("span",null,u))),a.createElement(l.xA,{components:c.ol},n)))}function p(e){return a.createElement(d,e,a.createElement(r,e))}const g=s.default.div.attrs({tabIndex:0}).withConfig({displayName:"BlogPostTemplate__BlogHeader",componentId:"sc-aqkyp8-0"})(["padding:"," 0 0 0;width:100%;text-align:center;p{opacity:0.8;font-size:",';&:after{content:"";margin:'," auto;display:block;width:200px;height:2px;border-radius:50%;background-color:",";opacity:0.4;}}"],(0,u.di)(1),(0,u.di)(.75),(0,u.di)(1),m.T8),f=s.default.h1.withConfig({displayName:"BlogPostTemplate__BlogTitle",componentId:"sc-aqkyp8-1"})(["color:",';font-weight:900;font-size:40px;font-family:"Futura PT",-apple-system,sans-serif;'],m.T8)},8453:function(e,t,n){n.d(t,{RP:function(){return o},xA:function(){return s}});var l=n(6540);const a=l.createContext({});function o(e){const t=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const r={};function s({components:e,children:t,disableParentContext:n}){let s;return s=n?"function"==typeof e?e({}):e||r:o(e),l.createElement(a.Provider,{value:s},t)}}}]);
//# sourceMappingURL=component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-draft-pull-requests-draft-pull-requests-mdx-d154c05fcf6feaaa2165.js.map