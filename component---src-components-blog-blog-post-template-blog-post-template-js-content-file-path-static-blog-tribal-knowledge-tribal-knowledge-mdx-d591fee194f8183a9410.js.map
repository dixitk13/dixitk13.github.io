{"version":3,"file":"component---src-components-blog-blog-post-template-blog-post-template-js-content-file-path-static-blog-tribal-knowledge-tribal-knowledge-mdx-d591fee194f8183a9410.js","mappings":"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","sources":["webpack://dixitk13.github.io/./static/blog/tribal-knowledge/tribal-knowledge.mdx","webpack://dixitk13.github.io/./src/components/Blog/BlogPostTemplate/BlogPostTemplate.js","webpack://dixitk13.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This article delves into what tribal knowledge is, its impact on organizations, and a CTA (call to action) for leadership to affectively manage it.\"), \"\\n\", React.createElement(_components.p, null, \"The basic LMGTFY (let me google that for you) meaning for tribal knowledge would be: ‚Äù\", React.createElement(_components.em, null, \"unwritten, unspoken, and undocumented institutional knowledge within an organization held by specific individuals and groups\"), \"‚Äú.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"ü¶â Building knowledge\")), \"\\n\", React.createElement(_components.p, null, \"One of the many things organizations do is build a lot of tribal knowledge base, on a variety of topics from choosing technological decisions to executing leadership strategies.\"), \"\\n\", React.createElement(_components.p, null, \"One may ask, how does an organization build this so-called tribal knowledge?\"), \"\\n\", React.createElement(_components.p, null, \"Historically, based on my observations, much of this aggregates when teams (and organizations) move at unusually faster speeds to achieve goals necessary to meet crucial timelines, sacrificing aspects necessary for long-term growth. Much of the decisions are closed-loop, to execute faster.\"), \"\\n\", React.createElement(_components.p, null, \"Why would an organization operate in such a manner, building short-term wins while sacrificing long-term growth?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"üè¶¬†Taxes\")), \"\\n\", React.createElement(_components.p, null, \"Everyone should have heard about taxes, which based on different countries can vary, but generally sit around 22 to 37% for STCG (short-term capital gain) and 0 to 20% range for LTCG (long-term capital gain) depending on the income range.\"), \"\\n\", React.createElement(_components.p, null, \"If we apply this analogy to taxes, strategically converting STCG to LTCG by holding and spreading the LTCG gains over multiple years is the simplest tax-minimizing strategy.\"), \"\\n\", React.createElement(_components.p, null, \"After all, the opposite doesn‚Äôt make sense because STCG is taxed fairly higher than LTCG - so gravitating towards long-term would seem more logical.\"), \"\\n\", React.createElement(_components.p, null, \"So why sacrifice long-term engineering growth, and miss out on the force-multipler?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"üí¨ Anecdote\")), \"\\n\", React.createElement(_components.p, null, \"Before proceeding, I want to give an anecdote here, and I‚Äôll need to set some background for this one.\"), \"\\n\", React.createElement(_components.p, null, \"My team would organize a small pizza party on Fridays (when WFH wasn‚Äôt the new norm) just as a team-building exercise for the organization. Being naive and young, I went around the office open-plan space, trying to take note of everyone‚Äôs pizza preference, to maximize gratitude.\"), \"\\n\", React.createElement(_components.p, null, \"Little did I realize I was slowly falling into the sandpit of indecision.\"), \"\\n\", React.createElement(_components.p, null, \"My manager came up to me and whispered in my ear, ‚ÄúDon‚Äôt try to achieve consensus execute a popular choice -immediately!‚Äù\"), \"\\n\", React.createElement(_components.p, null, \"I wasn‚Äôt convinced back then, but eventually executed the ‚Äúpopular decision‚Äù. After all, it was the exact opposite of what I was trying to do.\"), \"\\n\", React.createElement(_components.p, null, \"But turns out that it‚Äôs pretty hard to navigate options at times, and people can have a variety of preferences - but I‚Äôd suggest folks try this one. The ‚Äúpopular decision‚Äù back then was just Garden veggies, Pepperoni, and cheese - easy!\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"üßÆ The 37% rule\")), \"\\n\", React.createElement(_components.p, null, \"There‚Äôs a mathematical concept that suggests one can \", React.createElement(_components.strong, null, \"optimally stop\"), \" at 37% to choose a good option - I feel humans pick this intuitively at times, but I do suggest looking up this 37% concept if it seems interesting.\"), \"\\n\", React.createElement(_components.p, null, \"This might also help explain why people often don‚Äôt wait for everyone to agree before making a decision. It suggests that there‚Äôs a point where it‚Äôs better to stop gathering opinions and just choose.\"), \"\\n\", React.createElement(_components.p, null, \"There‚Äôs also a subtle difference in optimal stopping vs achieving consensus, but these are related concepts and optimal stopping can be used for reaching consensus.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"ü¶• Moving on from taxes, anecdotes, and the 37% rule\")), \"\\n\", React.createElement(_components.p, null, \"Organizations at times bring in weighted choices from their ‚Äútrusted inner circle‚Äù of members, which most possibly includes management & select ICs, and execute decisions by achieving consensus within a group.\"), \"\\n\", React.createElement(_components.p, null, \"This restricted flow of information which happened behind ‚Äúoff-the-record‚Äù, often taints organizations as ‚Äúclosed organizations‚Äù, but helps them make faster decisions and brings in bias for action.\"), \"\\n\", React.createElement(_components.p, null, \"Information flow that happened behind closed doors must seem like high entropy to the outside universe observing it.\"), \"\\n\", React.createElement(_components.p, null, \"Organically breaking this is a choice leadership involved in this exchange should share and perhaps document - otherwise, the seeds of tribal knowledge start to be sown!\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"üåä Call to action\")), \"\\n\", React.createElement(_components.p, null, \"Some organizations choose to let this information flow down like a crystal lattice using mentorship and mentor-mentee relationships. XFn (cross-functional) collaboration is something that when intertwined with a mentorship mechanism can help spread engineering knowledge across various verticals in an organization as well.\"), \"\\n\", React.createElement(_components.p, null, \"Knowledge also starts contributing to ‚Äúbecoming tribal‚Äù when people change teams or when people leave companies. This is where encouraging structured documentation and formal knowledge transfer sessions are helpful, but not perfect.\"), \"\\n\", React.createElement(_components.p, null, \"As you‚Äôd expect, the lack of documentation within such areas also causes a higher onboarding time & increasing defect rate. Surely having SMEs (Subject matter experts) in your organizations helps alleviate this, but this just increases reliance on individuals & longer resolution times.\"), \"\\n\", React.createElement(_components.p, null, \"As innocuous as it may seem, this obstructed information flow starts hampering the productivity and culture of the organization.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"üîö Ending\")), \"\\n\", React.createElement(_components.p, null, \"When engineering seeks to solve problems, this knowledge may be a crucial aspect in determining solutions.\"), \"\\n\", React.createElement(_components.p, null, \"So help engineering help you.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/dixitk13/code/dixitk13.github.io/static/blog/tribal-knowledge/tribal-knowledge.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport styled from \"styled-components\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {BlogWrapper, BlogMain} from \"../common\";\nimport {mdxComponents} from \"../../../common\";\nimport {rhythm} from \"../../../utils\";\nimport {fontColor} from \"../../../styles\";\nimport {SEOComponent} from \"../../SEO\";\nfunction BlogPostTemplate({data, children, pageContext}) {\n  if (!pageContext) return null;\n  const {frontmatter, excerpt, timeToReadInWords} = pageContext ?? ({});\n  const {title, date} = frontmatter ?? ({});\n  return React.createElement(BlogWrapper, null, React.createElement(SEOComponent, {\n    title: title,\n    description: excerpt || \"nothin\",\n    article: true\n  }), React.createElement(BlogMain, null, React.createElement(BlogHeader, null, React.createElement(BlogTitle, null, title), React.createElement(\"p\", null, \"Last updated: \", date, \" ‚Ä¢\", \" \", timeToReadInWords && React.createElement(\"span\", null, timeToReadInWords))), React.createElement(MDXProvider, {\n    components: mdxComponents\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst BlogHeader = (styled.div.attrs({\n  tabIndex: 0\n}))`\n  padding: ${rhythm(1)} 0 0 0;\n  width: 100%;\n  text-align: center;\n\n  p {\n    opacity: 0.8;\n    font-size: ${rhythm(0.75)};\n    &:after {\n      content: \"\";\n      margin: ${rhythm(1)} auto;\n      display: block;\n      width: 200px;\n      height: 2px;\n      border-radius: 50%;\n      background-color: ${fontColor};\n      opacity: 0.4;\n    }\n  }\n`;\nconst BlogTitle = (styled.h1)`\n  color: ${fontColor};\n  font-weight: 900;\n  font-size: 40px;\n  font-family:\n    \"Futura PT\",\n    -apple-system,\n    sans-serif;\n`;\nexport const query = graphql`\n  query blogPostByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      timeToReadInWords\n      frontmatter {\n        title\n        type\n        date(formatString: \"MMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","strong","_provideComponents","components","React","wrapper","MDXLayout","BlogPostTemplate","_ref","data","children","pageContext","frontmatter","excerpt","timeToReadInWords","title","date","BlogWrapper","SEOComponent","description","article","BlogMain","BlogHeader","BlogTitle","MDXProvider","mdxComponents","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","styled","div","attrs","tabIndex","withConfig","displayName","componentId","rhythm","fontColor","h1","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}