{"data":{"blogs":{"edges":[{"node":{"id":"16ee6fa4-cc64-5304-9dca-4fb106838b5a","body":"\nThis article delves into what tribal knowledge is, its impact on organizations, and a CTA (call to action) for leadership to affectively manage it.\n\nThe basic LMGTFY (let me google that for you) meaning for tribal knowledge would be: \"_unwritten, unspoken, and undocumented institutional knowledge within an organization held by specific individuals and groups_\".\n\n**ü¶â Building knowledge**\n\nOne of the many things organizations do is build a lot of tribal knowledge base, on a variety of topics from choosing technological decisions to executing leadership strategies.\n\nOne may ask, how does an organization build this so-called tribal knowledge?\n\nHistorically, based on my observations, much of this aggregates when teams (and organizations) move at unusually faster speeds to achieve goals necessary to meet crucial timelines, sacrificing aspects necessary for long-term growth. Much of the decisions are closed-loop, to execute faster.\n\nWhy would an organization operate in such a manner, building short-term wins while sacrificing long-term growth?\n\n**üè¶¬†Taxes**\n\nEveryone should have heard about taxes, which based on different countries can vary, but generally sit around 22 to 37% for STCG (short-term capital gain) and 0 to 20% range for LTCG (long-term capital gain) depending on the income range.\n\nIf we apply this analogy to taxes, strategically converting STCG to LTCG by holding and spreading the LTCG gains over multiple years is the simplest tax-minimizing strategy.\n\nAfter all, the opposite doesn't make sense because STCG is taxed fairly higher than LTCG - so gravitating towards long-term would seem more logical.\n\nSo why sacrifice long-term engineering growth, and miss out on the force-multipler?\n\n**üí¨ Anecdote**\n\nBefore proceeding, I want to give an anecdote here, and I'll need to set some background for this one.\n\nMy team would organize a small pizza party on Fridays (when WFH wasn't the new norm) just as a team-building exercise for the organization. Being naive and young, I went around the office open-plan space, trying to take note of everyone's pizza preference, to maximize gratitude.\n\nLittle did I realize I was slowly falling into the sandpit of indecision.\n\nMy manager came up to me and whispered in my ear, \"Don't try to achieve consensus execute a popular choice -immediately!\"\n\nI wasn't convinced back then, but eventually executed the \"popular decision\". After all, it was the exact opposite of what I was trying to do.\n\nBut turns out that it's pretty hard to navigate options at times, and people can have a variety of preferences - but I'd suggest folks try this one. The \"popular decision\" back then was just Garden veggies, Pepperoni, and cheese - easy!\n\n**üßÆ The 37% rule**\n\nThere's a mathematical concept that suggests one can **optimally stop** at 37% to choose a good option - I feel humans pick this intuitively at times, but I do suggest looking up this 37% concept if it seems interesting.\n\nThis might also help explain why people often don't wait for everyone to agree before making a decision. It suggests that there's a point where it's better to stop gathering opinions and just choose.\n\nThere's also a subtle difference in optimal stopping vs achieving consensus, but these are related concepts and optimal stopping can be used for reaching consensus.\n\n**ü¶• Moving on from taxes, anecdotes, and the 37% rule**\n\nOrganizations at times bring in weighted choices from their \"trusted inner circle\" of members, which most possibly includes management & select ICs, and execute decisions by achieving consensus within a group.\n\nThis restricted flow of information which happened behind \"off-the-record\", often taints organizations as \"closed organizations\", but helps them make faster decisions and brings in bias for action.\n\nInformation flow that happened behind closed doors must seem like high entropy to the outside universe observing it.\n\nOrganically breaking this is a choice leadership involved in this exchange should share and perhaps document - otherwise, the seeds of tribal knowledge start to be sown!\n\n**üåä Call to action**\n\nSome organizations choose to let this information flow down like a crystal lattice using mentorship and mentor-mentee relationships. XFn (cross-functional) collaboration is something that when intertwined with a mentorship mechanism can help spread engineering knowledge across various verticals in an organization as well.\n\nKnowledge also starts contributing to \"becoming tribal\" when people change teams or when people leave companies. This is where encouraging structured documentation and formal knowledge transfer sessions are helpful, but not perfect.\n\nAs you'd expect, the lack of documentation within such areas also causes a higher onboarding time & increasing defect rate. Surely having SMEs (Subject matter experts) in your organizations helps alleviate this, but this just increases reliance on individuals & longer resolution times.\n\nAs innocuous as it may seem, this obstructed information flow starts hampering the productivity and culture of the organization.\n\n**üîö Ending**\n\nWhen engineering seeks to solve problems, this knowledge may be a crucial aspect in determining solutions.\n\nSo help engineering help you.\n","excerpt":"This article delves into what tribal knowledge is, its impact on organizations, and a CTA (call to action) for leadership to affectively manage it. Th‚Ä¶","frontmatter":{"path":"/tribal-knowledge","type":"blog","date":"Jul 11, 2025","title":"<Breaking> Tribal knowledge"}}},{"node":{"id":"abdc19ea-203e-56e4-89b5-d18054b51f99","body":"\nIn this article we'll go over how I design my application state in a TypeScript and React app\nusing useReducer hook and Context API. I use this technique across my app for maintaining the\napplication state.\n\n## Why useReducer?\n\nState-management libraries like Redux/MobX still hold their pros/cons\nfor maintaing application state, but react state owns its position.\n\nSince the introduction of hooks, I've primarily used react state\nfor state management, and when clubbed with Context API,\nit starts behaving like `all-purpose-flour`.\n\nReact state is pretty lightweight, needs no extra libraries &\ncan be quickly setup for smaller lightweight projects.\n\nBut before we jump into this, lets do a quick recap.\n\n## Recap useReducer\n\n`useReducer` is the preferred hook you'd want to use when dealing with\ncomplex state.\n\n`useReducer` uses a reducer function, along with initialState to define the\ninitial \"reducer\", which then returns you the current state value and\na special dispatch function.\n\nThis dispatch function can be used to \"dispatch\" actions to the reducer\nwhich can be handled with a simple switch statement (just like `redux` does) &\nthe state then would have the updated values. The reference to the dispatch function\nstays the same between FC (Functional Component) renders and can be directly passed down as props.\n\nLet's look at a quick example, taken from [React's documentation](https://reactjs.org/docs/hooks-reference.html#usereducer):\n\n```javascript\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n    </>\n  );\n}\n```\n\nIn this example above, we see dispatch is sent special \"instructions\" like\n`increment` and `decrement` to update the reducer state values. One can construct\nspecial instructions here to update the state as desired.\n\nHopefully that summarizes `useReducer`. If not, do head over to\nReact's documentation.\n\n> Pro-tip\n\n`useState` uses `useReducer` under the hood! Let's see how.\n\n```javascript\nconst myreducer = (_, action) => {\n  return action.state;\n};\n\nconst [state, dispatch] = React.useReducer(myreducer, true);\nconst setState = (flag) => dispatch({ state: flag });\n\nsetState(false);\nsetState(true);\n\n// is equaivalent to\n\nconst [state, setState] = useState(true);\nsetState(false);\nsetState(true);\n```\n\nSo if one were to modify the dispatch function to just take the state\nyou want the reducer to set, you'd get the `useState` behavior right away!\n\n## Recap useContext\n\nThe React Context API helps developers truely have \"global\" react state that can be\naccessed without props being passed to children and grandchildren, AKA prop-drilling,\nand helps skip re-rendering components which don't use that context-state -\nultimately leading to dynamic UI and cleaner code.\n\nThe `useContext` hook is an alternative of `Context.Consumer` API, allowing\ndevelopers to consume values under a Provider.\n\n```tsx{numberLines: true}\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextState {\n  theme?: Theme;\n  setTheme?: Function;\n}\n\nconst ThemeContext = React.createContext<ThemeContextState>({});\n\nexport const UseContextApp = () => {\n  return (\n    <ThemeWrapperApp>\n      <Radios />\n      <Status />\n      <Card title=\"Child #1\" size=\"large\" enableRenderCount={true}>\n        <Card title=\"Child #2\" enableRenderCount={true}>\n          <ChildWithContext />\n        </Card>\n      </Card>\n    </ThemeWrapperApp>\n  );\n};\n\nconst Radios = () => {...}\n\nconst Status = () => {\n  const { theme } = React.useContext(ThemeContext);\n  return <div className=\"status-bar\">VALUE: {String(theme)}</div>;\n};\n\nconst ThemeWrapperApp = ({ children }: React.PropsWithChildren<{}>) => {\n  const [theme, setTheme] = React.useState<Theme>(\"light\");\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nconst ChildWithContext = () => {\n  const { theme } = React.useContext(ThemeContext);\n  return (\n    <>\n      <span>{theme}</span>\n      <Card title=\"Child-N\" size=\"mini\" enableRenderCount={true} />\n    </>\n  );\n};\n\n```\n\nThe above example looks like the gif shown here. Each child card has\na number at the top right corner, indicating how many times it was rendered.\n\nWe start by creating the context at L8, and using the Provider API to wrap all its\nchildren like L31. The Status component consumes the context and updates the same.\nAt L17 the `ChildWithContext` is a Child which is two level's from the top-context.\n\nIn the GIF we see all the Child cards are skipped from rendering when the radio buttons\nactually change the value from the parent, except the one's consuming it.\n\n![usecontext-skipping-children](/blog/designing-my-usereducer/context-skipping-children.gif)\n\nThat's React Context!\n\n## Counter\n\nNow its time to merge `useReducer` and `useContext`! Let's try this with Counter\nexample first. But before we jump into the example, lets look at the core\nfile structure and follow that with the contents of the files.\n\n### File Structure\n\nI like to keep my files co-located, so I try and keep them in a single folder, at least\nthe ones which are related. I've tried another way as well, i.e. keeping hooks,\nactions, styles, etc. together. There's pros and cons to both these approaches IMO, but\nlets stick with single folder approach for this one.\n\n```sh\nsrc\n‚îú‚îÄ‚îÄ App.tsx\n‚îî‚îÄ‚îÄ Counter\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Counter.tsx\n‚îÇ¬†  ‚îú‚îÄ‚îÄ actions.ts\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts\n‚îÇ   ‚îú‚îÄ‚îÄ interface.ts\n‚îÇ   ‚îú‚îÄ‚îÄ reducer.ts\n‚îÇ   ‚îî‚îÄ‚îÄ useCounterState.tsx\n‚îî‚îÄ‚îÄ index.tsx\n```\n\nHigh-level overview for the files:\n\n- `interface.ts`: holds the interfaces across the entire Counter example\n- `reducer.ts`: defines the reducer itself, along w/ initial state etc\n- `actions.ts`: functions which use the action interface & can be used in React FCs\n- `Counter.tsx`: the real React FC, which will use the actions, state, etc\n- `useCounterState.tsx`: is the hook where the reducer and context API are fused together\n\n### Interfaces\n\nFor this quick example, the state will only capture the current value which\nwill be called `CounterState`.\n\nThere will be only two kinds of actions viz. Increment and Decrement.\nWe'll create a Enum for that, let's call it `CounterStateEnum`. This will behave\nlike a [typescript discriminator](https://dixitk13.github.io/typescript-discriminator)\nfor reducer switch case - the case will switch on `action.type` but we'll get to\nthat in the reducer section.\n\nTo enable that we create a generic union type called `CounterAction` - which\nwill be a combination of `CounterIncrementAction` and `CounterDecrementAction`.\n\n```typescript\nexport interface CounterState {\n  value: number;\n}\n\nexport enum CounterStateEnum {\n  COUNTER_STATE_INCREMENT = \"COUNTER_STATE_INCREMENT\",\n  COUNTER_STATE_DECREMENT = \"COUNTER_STATE_DECREMENT\",\n}\n\nexport interface CounterIncrementAction {\n  type: CounterStateEnum.COUNTER_STATE_INCREMENT;\n}\n\nexport interface CounterDecrementAction {\n  type: CounterStateEnum.COUNTER_STATE_DECREMENT;\n}\n\nexport type CounterAction = CounterIncrementAction | CounterDecrementAction;\n\nexport type CounterDispatch = React.Dispatch<CounterAction>;\n```\n\n## Actions\n\nMoving on to action creators, as some may call them. These will be functions\nwhich we can directly invoke from the components themselves.\n\nWe'll define two viz. `counterIncrement` and `counterDecrement` and\nincrementing/decrementing respectively.\n\n```typescript\nexport const counterIncrement = (): CounterIncrementAction => {\n  return {\n    type: CounterStateEnum.COUNTER_STATE_INCREMENT,\n  };\n};\n\nexport const counterDecrement = (): CounterDecrementAction => {\n  return {\n    type: CounterStateEnum.COUNTER_STATE_DECREMENT,\n  };\n};\n```\n\n## Reducer\n\nThe core-functionality of your hook will be defined here. For the counter example,\nit might seem very simple use-case, the same technique can be extended further handle\nmore complex states. Let's take a look at the implementation now.\n\n```typescript\nexport const initialCounterState: CounterState = {\n  value: 0,\n};\n\nexport const reducer = (state: CounterState, action: CounterAction) => {\n  switch (action.type) {\n    case CounterStateEnum.COUNTER_STATE_INCREMENT:\n      return {\n        ...state,\n        value: state.value + 1,\n      };\n    case CounterStateEnum.COUNTER_STATE_DECREMENT:\n      return {\n        ...state,\n        value: state.value - 1,\n      };\n    default:\n      throw new Error(`Unhandled action type`);\n  }\n};\n```\n\n## useReducerState\n\nWe'll use two context instances here:\n\n- `CounterDispatchContext`: for storing the dispatch function\n- `CounterStateContext`: for consuming the state\n\nSplitting this into two sections, helps one prevent re-rendering\ncomponents which dispatch an update in state but don't really\nconsume the state itself.\n\n```typescript\nconst CounterStateContext =\n  React.createContext<CounterState>(initialCounterState);\nconst CounterDispatchContext = React.createContext<CounterDispatch>(\n  () => undefined\n);\n```\n\nWe can define corresponding hooks to take advantage of the `useContext` hooks\nand even define a hook to extract both these variables together!\n\n```typescript\nexport const useCounterState = (): CounterState => {\n  return React.useContext(CounterStateContext);\n};\n\nexport const useCounterDispatch = (): CounterDispatch => {\n  return React.useContext(CounterDispatchContext);\n};\n\nexport const useCounterContext = () => {\n  const state = useCounterState();\n  const dispatch = useCounterDispatch();\n  return {\n    state,\n    dispatch,\n  };\n};\n```\n\nWe also define a Provider `CounterProvider` which sprinkles and allows children\nvariables to consume state/dispatch along with initializing `useReducer`. This\n`CounterProvider` can be used for consuming both these context instances defined\nallow for a cleaner import.\n\n```typescript\ninterface CounterProviderProps {\n  children: React.ReactChild | React.ReactChildren;\n}\n\nexport const CounterProvider = (props: CounterProviderProps) => {\n  const [state, dispatch] = React.useReducer(reducer, initialCounterState);\n\n  return (\n    <CounterDispatchContext.Provider value={dispatch}>\n      <CounterStateContext.Provider value={state}>\n        {props.children}\n      </CounterStateContext.Provider>\n    </CounterDispatchContext.Provider>\n  );\n};\n```\n\nThis above is how the `CounterProvider` looks like.\n\n### index.ts\n\nAn index file to export everything.\n\n```typescript\nexport * from \"./useCounterState\";\n\nexport * from \"./interface\";\nexport * from \"./actions\";\nexport * from \"./reducer\";\n\n...and more\n```\n\n### Counter\n\nThe simple FC, consuming the state & using the dispatch functions\n\n```typescript\nimport {\n  counterDecrement,\n  counterIncrement,\n  useCounterState,\n  useCounterDispatch,\n} from \"./\";\n\nexport const Counter = () => {\n  const dispatch = useCounterDispatch();\n  const { value } = useCounterState();\n\n  const increment = () => dispatch(counterIncrement());\n  const decrement = () => dispatch(counterDecrement());\n\n  return (\n    <div className=\"counter-container\">\n      <h1>{value}</h1>\n      <div className=\"actions\">\n        <button onClick={increment}>Increment</button>\n        <button onClick={decrement}>Decrement</button>\n      </div>\n    </div>\n  );\n};\n```\n\n## App\n\nHow would you consume this inside an App?\n\n```typescript\nimport { CounterProvider, Counter } from \"./Counter\";\n\nexport default function App() {\n  return (\n    <CounterProvider>\n      <div className=\"App\">\n        <Counter />\n      </div>\n    </CounterProvider>\n  );\n}\n```\n\n![demo-app](/blog/designing-my-usereducer/demo-app.gif)\n\nHere's a codepen putting all of it together. https://codesandbox.io/s/my-context-0k8dd\n","excerpt":"In this article we‚Äôll go over how I design my application state in a TypeScript and React app using useReducer hook and Context API. I use this‚Ä¶","frontmatter":{"path":"/designing-my-reducer","type":"blog","date":"Feb 01, 2021","title":"Designing my TypeScript useReducer"}}},{"node":{"id":"a3af941a-0870-5a10-bf93-aab04ae2240c","body":"\nIn this article we'll go thro some array functions and then on-to some\nstuff which I consider fancy stuff.\nJump to [fancy stuff](#Fancies)\n\n## Arrays\n\nLet's try going through some useful array functions:\n\n> filter\n\nThe simplest array function - `filter`. It will filter the elements of the array if\ncondition is true - and will return a filtered array.\n\nLet's try the simplest of functions i.e. to find elements which are even using\nan inline function and a function which sits outside like `isEven` defined below.\n\n```typescript\nconst arr: number[] = [1, 2, 3, 4];\n\nconsole.log(arr.filter((x) => x % 2)); // [1, 3]\n\nconst isEven = (x: number): boolean => x % 2 === 0;\nconsole.log(arr.filter(isEven)); // [2, 4]\n```\n\nThe callback function provided by `filter` has an optional parameter which lets\nyou access the position, so - lets try another function which tells us\nelements which are at even positions.\n\n```typescript\nconst arr2: number[] = [5, 6, 7, 9];\nconsole.log(arr2.filter((_, index) => isEven(index))); // [5, 7]\n\nconst isEvenIndex = <T>(_: T, index: number): boolean => index % 2 === 0;\nconsole.log(arr2.filter(isEvenIndex)); // [5, 7]\n\n// similarly w/ objects\ninterface KV {\n  k: string;\n  v: number;\n}\nconst arr3: KV[] = [\n  { k: \"x\", v: 1 },\n  { k: \"y\", v: 4 },\n  { k: \"z\", v: 9 },\n  { k: \"a\", v: 3 },\n];\n\nconsole.log(arr3.filter((x) => x.v % 2 === 0)); // [{k: \"y\", v: 4}]\n```\n\n> findIndex\n\n`findIndex` returns the index of the first element in the array where the\ncallback function provided returns true.\nElse, it returns -1, meaning no such element was found.\n\n```javascript\nconst arr1 = [2, 4, 6, 7];\nconst isPerfectSquareRoot = x => x > 0 && Math.sqrt(x) % 1 === 0;\nconst isPerfectCubeRoot = x => x > 0 && Math.cbrt(x) % 1 === 0;\n\nconsole.log(isPerfectSquareRoot(4)); // true\nconsole.log(isPerfectCubeRoot(7)); // false\nconsole.log(isPerfectCubeRoot(8)); // true\n\nconsole.log(arr1.findIndex(isPerfectSquareRoot)); // 1 - which is 4\nconsole.log(arr1.findIndex(isPerfectCubeRoot)); // -1 - meaning not present\n\nconst nine: KV = { k: \"z\", v: 9 };\nconst arr3: KV[] = [{ k: \"x\", v: 1 }, { k: \"y\", v: 4 }, nine, { k: \"a\", v: 3 }];\n\nconsole.log(arr3.filter(x => x.v % 2 === 0));\nconsole.log(arr3.findIndex(x => x.v === 9)); // 2\nconsole.log(arr3.findIndex(x => x.v === 2)); // -1\n\n// also not to forget some object equality stuff\nconsole.log(arr3.findIndex(x => x === { k: \"z\", v: 9 })); // -1\nconsole.log(arr3.findIndex(x => x === nine)); // 2\n```\n\n> some\n\n`some` is used as an indicator to test and find out if a certain condition\nexists inside the array. It also breaks out as soon as the condition is met\ninstead of travesing the entire array.\n\nRefer `includes` to find out how its different than `some`.\n\n```javascript\nconst arr1 = [2, 4, 6, 7];\nconsole.log(arr1.some((x) => x % 2 !== 0)); // true\nconsole.log([2, 4, 6].some((x) => x % 2 !== 0)); // false\n```\n\n> includes\n\n`includes` finds out if a particular element exists inside the array.\n\nIt's **different** than `some` in the sense that it won't allow for custom\nfunctions which check the presence of an element.\n\n`includes` is also similar to `indexOf` and behaves like a short-hand.\n\n```typescript\nconst strs: string[] = [\n  \"The\",\n  \"quick\",\n  \"brown\",\n  \"fox\",\n  \"jumps\",\n  \"over\",\n  \"the\",\n  \"lazy\",\n  \"fox\",\n];\n\nconsole.log(strs.includes(\"fox\")); // true\nconsole.log(strs.includes(\"nox\")); // false\n\nconst myIncludes = <T>(arr: T[], ele: T): boolean => {\n  return arr.indexOf(ele) !== -1;\n};\n\nconsole.log(myIncludes(strs, \"fox\")); // true\nconsole.log(myIncludes(strs, \"nox\")); // false\n```\n\n> concat\n\nA simple `concat` function which will concat two arrays and return\na new array w/o changing the original array.\n\nImportant thing to note is `concat` will not flatten nested arrays.\n\n```javascript\nconst a1 = [\"a\", \"b\", \"c\"];\nconst a2 = [\"d\", \"e\", \"b\"];\nconst a3 = [\"x\", \"a\", \"y\"];\n\nconsole.log(a1.concat(a2)); // ['a', 'b', 'c', 'd', 'e', 'b']\n\nconsole.log(a1.concat(a2, a3)); // ['a', 'b', 'c', 'd', 'e', 'b', 'x', 'a', 'y']\n\nconsole.log(a1); // ['a', 'b', 'c']\n\nconst x1 = [\"a\", \"b\"];\nconst x2 = [\"x\", [\"y\", \"z\"]];\n\nconsole.log(x1.concat(x2)); // ['a', 'b', 'x', ['y', 'z']]\n```\n\n> forEach\n\n`forEach` function is used to iterate over each element of the array as the name\nspecifies, but it won't return anything and is void.\n\n```javascript\n[7, 5, 6, 9].forEach((x, index) =>\n  console.log(`index: ${index}, value: ${x} => `)\n);\n\n// prints\n// index: 0, value: 7 => index:1, value: 5 => index: 2, value: 6 => index: 3, value: 9 =>\n```\n\nIt also skips calling itself for empty elements.\n\n```javascript\n[, , ,].forEach((x, index) =>\n  console.log(`[index: ${index}: value: ${x}] => `)\n);\n// nothing prints!\n```\n\nAnother point to note about the `forEach` callback is that the callback\nfunctions can't be async and won't wait for async operations to finish.\n\n```javascript\nconst fileDates = readFiles();\n\n// doens't work and won't wait for generateForDate to finish\nfileDates.forEach(async (date) => await generateForDate(date));\n\n// works, below is the right way\nfor (const date of fileDates) {\n  await generateForDate(date);\n}\n```\n\n> every\n\n`every` will make sure \"every\" element in the array will satisfy the callback condition.\nIf yes - it returns a boolean value.\nElse a falsy value to indicate the presence of an element where the callback\nfunction doesn't get satisfied.\n\nAnd yes it'll also take into consideration sparse arrays.\n\n```javascript\nconsole.log([1, 2, 4, ,].every((x) => x % 2 === 0)); // false\nconsole.log([2, 4, ,].every((x) => x % 2 === 0)); // true\n```\n\n> find\n\n`find` is very similar to `some` - it looks for the presence of the element\nand breaks out as soon as it finds the truthy element and allows a function\nfor checking the presence of the element.\n\nBut instead of returning true/false it'll return the actual element!\nIf not found, it'll return undefined.\n\n`find` also will look for the first element - so be sure to have that\nconditional logic in mind when using the function.\n\n```typescript\nconsole.log(strs.find((x) => x === \"nox\")); // undefined\nconsole.log(strs.find((x) => x === \"fox\")); // fox (first fox not the second fox)\n\nconsole.log(strs.find((x) => x && x.startsWith(\"fo\"))); // fox (first fox not the second fox)\n```\n\n> reverse\n\n`reverse` will reverse an array in-place.\n**in-place** that's right - so it'll modify the original array.\n\n```typescript\nconst arr: number[] = [1, 5, 3];\nconsole.log(arr); // [1, 5, 3]\n\nconst rev: number[] = arr.reverse();\n\nconsole.log(rev); // [3, 5, 1]\nconsole.log(arr); // [3, 5, 1]\nconsole.log(rev === arr); // true\n```\n\n> map\n\n`map` is a very powerful function which like `forEach` loops over every element in\nthe array and returns a new `mapped` element for every element as returned via the callback function.\n\nIt doesn't touch the original array.\nIf nothing is returned from the map callback, it'll be an undefined element inside\nthe returned array.\n\n```typescript\nconst arr: number[] = [1, 5, 3];\nconsole.log(arr.map((x) => x * 2)); // [2, 10, 6]\nconsole.log(arr.map((x) => ({ x: x * 2 }))); // [ { x: 2 }, { x: 10 }, { x: 6 } ]\nconsole.log(arr.map((x, index) => ({ x: x * 2, idx: index })));\n// [ { x: 2, idx: 0 }, { x: 10, idx: 1 }, { x: 6, idx: 2 } ]\n\nconsole.log(\n  arr.map((x) => {\n    if (x % 2 === 0) return x;\n  })\n); // [undefined, undefined, undefined]\n```\n\n> flat\n\n`flat` will flatten the elements into a f-l-a-t structure and takes another\nargument to determine how deep the function should recursively flatten.\n\n```javascript\n// type DeepArray<T> = Array<T> | Array<DeepArray<T> | T>;\n\nconst arr6 = [\"a\", \"b\", [\"c\", \"d\"]];\nconsole.log(arr6.flat(1)); // [ 'a', 'b', [ 'c', 'd' ] ]\n\nconst arr7 = [\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\"]]];\nconsole.log(arr7.flat()); // [ 'a', 'b', 'c', 'd', [ 'e', 'f' ] ]\n\nconst arr4 = [\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\"]]];\nconsole.log(arr4.flat(2)); // [ 'a', 'b', 'c', 'd', 'e', 'f' ]\n\nconst arr5 = [\"a\", \"b\", [\"c\", \"d\", [\"e\", \"f\", [\"g\", \"h\"], [\"i\", \"j\"]]]];\nconsole.log(arr5.flat(Infinity));\n// [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]\n```\n\n> reduce\n\n`reduce` is yet another powerful function which will let you loop over\nthe entire array and has a concept of accumulator which accumulates results\nover the array.\n\nSimplest reduce function you'll see is addition of array elements. At each step the\naccumulator adds the element into itself and starts at 0 which is the starting\npoint.\n\n```javascript\nconsole.log([1, 4, 6].reduce((acc, x) => acc + x, 0)); // 11\n```\n\n| index | value | accumulator |\n| ----- | ----- | ----------- |\n| 0     | 1     | 0 + 1 = 1   |\n| 1     | 4     | 1 + 4 = 5   |\n| 2     | 6     | 5 + 6 = 11  |\n\n`reduce` is very powerful and many people use it to create complex-objects out\nor even changing the structure of elements. Ideally, I try to use `reduce` only when I want my function to\nreturn a singular element.\n\nLet's look at an example below for `reduce` where we'll count the value of elements.\n\n```javascript\nconst items = [\n  { x: 2, y: 1 },\n  { y: 2, z: 4 },\n  { z: 1, a: 1 },\n];\n\nconst summation = (objects) => {\n  return objects.reduce((acc, objItem) => {\n    return {\n      ...acc,\n      ...Object.keys(objItem).reduce(\n        (keyAcc, key) => ({ ...keyAcc, [key]: objItem[key] + (acc[key] || 0) }),\n        {}\n      ),\n    };\n  }, {});\n};\n\nconsole.log(summation(items)); // { x: 2, y: 3, z: 5, a: 1 }\n```\n\nLet's walk thro this in brief via the same tabular approach:\n\n| index | value            | accumulator                  |\n| ----- | ---------------- | ---------------------------- |\n| 0     | \\{ x: 2, y: 1 \\} | \\{ x: 2, y: 1 \\}             |\n| 1     | \\{ y: 2, z: 4 \\} | \\{ x: 2, y: 3, z: 4 \\}       |\n| 2     | \\{ z: 1, a: 1 \\} | \\{ x: 2, y: 3, z: 5, a: 1 \\} |\n\nWe also have a function called `reduceRight` which runs from right-side of\nthe array instead of from left.\n\n> from/of/fill\n\nSo I'd like to discuss 3 Array functions viz. `from`, `of` and `fill` together:\n\n- `from` returns a shallow copy from an array-like structure.\n\nIt also has a length property which you could set and get an\narray of that length and map with a callback function.\n\n```javascript\nconsole.log(Array.from(\"the\")); // [\"t\", \"h\", \"e\"]\nconsole.log(Array.from(1)); // []\nconsole.log(Array.from(\"1\")); // [\"1\"]\nconsole.log(Array.from([1, 2, 3], (x) => x * 2)); // [2, 4, 6]\n\nconsole.log(Array.from({ length: 3 })); // ['undefined', 'undefined', 'undefined']\nconsole.log(Array.from({ length: 3 }, (_, index) => index)); // [0, 1, 2]\n```\n\n- `of` creates an Array from the number of arguments provided\n\n```javascript\nArray.of(); // []\nArray.of(1); // [1]\nArray.of(1, 2, 3); // [1, 2, 3]\nArray.of(\"a\", \"b\"); // [\"a\", \"b\"]\n```\n\n- `fill` fills the array in-place and returns the modified array back\n\nIt has the mandatory first parameter which is what gets filled in the entire array.\nIt also has start(defaults to 0) and end (defaults to length of array)\nparameters which are inclusive, exclusive respectively.\n\n```javascript\nconst arr = [1, 2, 3, 4];\nconsole.log(arr.fill(0, 0, 2)); // [0, 0, 3, 4]\nconsole.log(arr.fill(5, 1)); // [1, 5, 5, 5]\nconsole.log(arr.fill(10)); // [10, 10, 10, 10]\n```\n\n> sort\n\nA simple `sort` function assumes the natural ordering and orders the elements\nin ascending order for numeric elements by itself.\n\nAn important fact to remember is, sorting is **in-place** and default ordering\nconverts numbers to strings and sorts them - checkout the 70 in the below example.\n\n```javascript\nconsole.log([7, 5, 6, 9].sort()); // [5, 6, 7, 9]\nconsole.log([70, 5, 6, 9].sort()); // [5, 6, 70, 9]\n```\n\nSubtracting the numbers and converting them is also something lots of people do\nto maintain ordering like below.\n\n```javascript\nconsole.log([70, 6, 5, 9].sort((a, b) => a - b)); // [5, 6, 9, 70]\n```\n\n## Fancies\n\nLet's look at some fun stuff as well:\n\n> fisher-yates-shuffle\n\nThe famous Fisher Yates shuffle algorithm. I won't dive much into the working\nand logic of it, but briefly state it out:\n\nAlgorithm:\n\n- init a variable called i as `let i = array.length`\n- Pick an element randomly from 0 - i, lets call it `j`\n- Swap the `i` element with this picked element `j`\n- Shrink the size of picking the elements, so `i--`. Repeat from step 2.\n\nThis ensures \"unbaised permutation\". Wikipedia is a better teacher than I am TBH - but below is the code\n\n```typescript\nconst letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\nconst fisherYatesShuffle = <T>(array: T[]): T[] => {\n  let i = array.length;\n  let temp: T;\n  let j: number;\n\n  // while there remain elements to shuffle\n  while (i) {\n    // Pick a remaining element\n    j = Math.floor(Math.random() * i--);\n\n    // And swap it with the current element\n    temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nconsole.log(fisherYatesShuffle(letters)); // [\"I\", \"J\", \"A\", \"G\", \"C\", \"E\", \"H\", \"D\", \"F\", \"B\"];\n```\n\nGreat links to read about Fisher Yates Algorithm:\n\n- https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n- https://bost.ocks.org/mike/shuffle/\n\n> Letter Generate function\n\nWe all know what's the ascii for character 'A', its numeric 65.\nBut how do we check that in JS?\n\nWell luckily function called `charCodeAt` tells us what's the\nascii code for the same and `String.fromCharCode` tells us the\nreverse mapping for it.\n\n```javascript\nconsole.log(\"A\".charCodeAt(0)); // 65;\nconsole.log(String.fromCharCode(65)); // \"A\";\n```\n\nNow let's try and write a function which gives us letters from 'A'\nto a particular letter - which might look like this:\n\n```typescript\nconst generateLetters = (startAscii: number, length: number = 1): string[] => {\n  const letters: string[] = Array.from({ length }).map((_, index) =>\n    String.fromCharCode(startAscii + index)\n  );\n\n  return letters;\n};\n\nconsole.log(generateLetters(65)); // ['A']\nconsole.log(generateLetters(65, 3)); // ['A', 'B', 'C']\nconsole.log(generateLetters(97, 3)); // ['a', 'b']\n```\n\n> PQ\n\nLet's look at a naive Priority Queue implementation. Tries to treat an sorted\narray as PQ and add/return values based on it for offer/poll respectively.\n\n```javascript\nfunction Tuple(val, freq) {\n  val = val;\n  freq = freq;\n  function toString() {\n    return JSON.stringify({ val, freq });\n  }\n  return {\n    toString,\n    val,\n    freq,\n  };\n}\nfunction PQ() {\n  lst = [];\n  function offer(x) {\n    lst.push(x);\n    lst.sort((x, y) => x.freq - y.freq);\n  }\n  function poll() {\n    if (isEmpty()) return null;\n    let val = lst.shift();\n    return val;\n  }\n  function isEmpty() {\n    return lst.length === 0;\n  }\n  return {\n    offer,\n    poll,\n    isEmpty,\n  };\n}\n\nlet pq = new PQ();\nfor (let i = 0; i < 10; i++) {\n  pq.offer(new Tuple(i, Math.random()));\n}\nwhile (!pq.isEmpty()) {\n  console.log(\"element \" + pq.poll());\n}\n\n// element {\"val\":8,\"freq\":0.0407238060411359}\n// element {\"val\":7,\"freq\":0.23583407354383357}\n// element {\"val\":6,\"freq\":0.24117641809409118}\n// element {\"val\":1,\"freq\":0.33821747985965533}\n// element {\"val\":9,\"freq\":0.40546659473293256}\n// element {\"val\":2,\"freq\":0.43895218033432615}\n// element {\"val\":5,\"freq\":0.5993946400967103}\n// element {\"val\":4,\"freq\":0.7927179659616519}\n// element {\"val\":0,\"freq\":0.887932230384556}\n// element {\"val\":3,\"freq\":0.999269467360683}\n```\n\n> custom-iterator\n\nA custom JS iterator. JS offers a iterator which you can attach into\nthe actual object like so:\n\n```javascript\nnums[Symbol.iterator] = iteratorFn;\n```\n\nNow you can use this object in `for..of`, `for..in` and `...` spread statements.\n\nThe function iterator has only two gotchas I'd say:\n\n- return done as false and a value. Use closure values to find position of value.\n- return done as true with undefined value, when truly finished\n\n```javascript\nconst iterator = function () {\n  // Get all the values in an array\n\n  const values = Object.values(this);\n\n  // Store the current array key and value being iterated in the key\n  let currentKeyIndex = 0;\n  let currentValueIndex = 0;\n\n  // Implementation of next()\n  return {\n    next() {\n      const currentValArray = values[currentValueIndex];\n\n      if (!(currentKeyIndex < currentValArray.length)) {\n        // reset\n        currentValueIndex++;\n        currentKeyIndex = 0;\n      }\n\n      if (!(currentValueIndex < values.length)) {\n        return {\n          value: undefined,\n          done: true,\n        };\n      }\n\n      return {\n        value: values[currentValueIndex][currentKeyIndex++],\n        done: false,\n      };\n    },\n  };\n};\nconst nums = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  z: [9, 10, 11],\n};\n\nnums[Symbol.iterator] = iterator;\n\nfor (const num of nums) {\n  console.log(num); // 1, 2, 3, 4, 5, 6, 9, 10, 11\n}\n\nconsole.log(...nums); // 1, 2, 3, 4, 5, 6, 9, 10, 11\nconsole.log([...nums].length); // 9\n```\n","excerpt":"In this article we‚Äôll go thro some array functions and then on-to some stuff which I consider fancy stuff. Jump to fancy stuff Arrays\n\nLet‚Äôs try going‚Ä¶","frontmatter":{"path":"/fancies-and-arrays","type":"blog","date":"Jun 10, 2020","title":"Fancies and Arrays"}}},{"node":{"id":"db22495a-8172-57dd-856b-4b54dee1f209","body":"\nI believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.\n\nI've always felt that need to entitle my PR's with:\n\n- [DO-NOT-MERGE]:\n\n  - When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.\n  - Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.\n  - Or I need a build out prod version of my code\n\n- [NEEDS-TESTING]: when I've finished writing the code:\n  - but its 12am\n  - or maybe my codebase lacks e2e for all the other code surrounding mine.\n    P.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.\n\n[DRAFT] is my rescuer here where any teammate isn't going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions\n\nRef: https://github.blog/2019-02-14-introducing-draft-pull-requests/\n\n## What I follow as nomenclature for Pull Requests:\n\nMost of my PR's follow a nomenclature for branch naming as well, call me victim of OCD but that's me!\n\n- `<username>/hotfix/<branch-code-name>` : for hot-fixes of course\n- `<username>/changes/<branch-code-name>` : for changes/improvements\n- `<username>/feature/<branch-code-name>`: for feature updates\n\nwhere branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that's the best way to do your nomenclature TBH.\n\nI usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you'd like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.\n\nA good read about how I adopted the above [here](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n\nSome argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch], but meh - email's not going to live long hopefully.\n\n```bash\ngit format-patch <branch> --stdout\n```\n\nAdopt **rebase**. It seems to keep the history clean, coming from the **merge** guy who used merge for several years now :)\n","excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I‚Äôve always felt that need to‚Ä¶","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"}}},{"node":{"id":"7fa09ac6-9bcb-5879-91d5-5ed91c162a0b","body":"\nVery often we have use-cases where we would like to use a single type `Union Type` but still be sure about the properties inside them.\n\n```tsx\ninterface Employee {\n  name: string;\n  salary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  power: boolean;\n}\n\nlet person: Employee | HumanResource;\n```\n\nBut under the hood Typescript union's are more of \"common\" properties inside them instead of \"having all the properties\".\n\nSo when you try and use it like:\n\n```tsx\nlet helloPerson = (person: Employee | HumanResource): void => {\n   console.log(person.<only has properties common to Employee & HumanResource aka name>);\n}\n```\n\nwhere as you would expect person to have `{name, salary}` or `{name, power}` and choose between them depending on what person is.\n\nThis is where discriminators come in power-play. Bear with my variable nomenclature:\n\nLets define an enum to contain both the use-cases of Person's we have, calling it `PersonType` and then define a type combining `HumanResource` and `Employee`.\n\n```tsx\nenum PersonType { \"EMPLOYEE\" , \"HR\" }\n\ninterface Employee {\n  name: string;\n  type: PersonType.EMPLOYEE\n\tsalary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  type: PersonType.HR\n  power: boolean;\n}\n\ntype Person = HumanResource | Employee;\n\nlet person: Employee | HumanResource;\n\nlet helloPerson = (person: Person): void => {\n  switch(person.type) {\n    case PersonType.EMPLOYEE:\n      // this gives you both name/salary since now TS understands\n      // and discriminates between the two types you have\n      console.log(person.{gives you name, salary});\n  }\n}\n```\n","excerpt":"Very often we have use-cases where we would like to use a single type  but still be sure about the properties inside them. But under the hood‚Ä¶","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"}}},{"node":{"id":"299ca33e-a2b6-5440-94c2-fe5bc96ca683","body":"\nEveryone has used regular expressions sometime of life to check validation \nof strings or you know capture a particular group of text you might be \nlooking for. \n\nToday I'll go over some basics, just for refreshers, incase folks are new \nto regular expressions and some advanced stuff which I personally found useful.\n\nSkip directly to [Advanced Section](#Advanced-Stuff) ‚û°Ô∏è\n\n\n## Basics \n\nA regular expression consists of a pattern and a set of flags. \nYou could do it in following ways:\n- Use the contructor pattern \n  e.g.: `new RegExp(\"pattern\")` or `new RegExp(\"pattern\", \"i\")`\n- Use the short hand by providing your pattern between `/`. \n  In this specific scenario javascript considers any text between \n  `/` as regular expressions but has some shortcomings which we'll discuss later on.\n  e.g.: `/pattern/` or `/MYPATTER/i`\n\n### Flags\nRegular expressions have a few flags which are useful for creating powerful expressions viz.\n\n| Flags    | Description  | \n|----------|---------------------------------------------------|\n| `i`      | Ignore case, says it all |\n| `g`      | Global search across the entire string(not just first occurrence) and return all occurrences |\n| `m`      | Multiline mode  |\n| `y`      | Sticky positions match |\n\nThere's more flags TBH, but the above are the most common ones I've come across.\n\n#### Flag examples using match \nStarting with simpler examples. For the below examples, we'll have a constant\nparagraph like below and we'll match against regex.\n\n```javascript\nconst paragraph = 'The quick brown fox jumps over the lazy dog.';\n<insert regex from below> \nconst found = paragraph.match(regex);\nconsole.log(found);\n```\n\nLets search for the word, \"the\" and we'll do like so: \n\n```javascript\nconst regex = /the/;\n\n> [\"the\"]\n\nconsole.log(found.index);\n> 31\n```\nOh nice, I can find the index for the match as well, huh! \n\nü§î Oh but wait, how can I ignore case and match the first \"The\"?\n\n```javascript\nconst regex = /the/i;\n\n> [\"The\"]\n```\nLooks like the above matched only the first \"the\" by ignoring case. \n\nüò∂ Nah, that's not what I was looking for. \nWhat happens if I do a global search using a `g` flag?\n\n```javascript\nconst regex = /the/g;\n\n> [\"the\"]\n```\nLooks like it globally searched for the second the? \n\nüòí What happens if I do both `i` and `g` together?\n\n```javascript\nconst regex = /the/ig;\n\n> [\"The\", \"the\"]\n```\nü§® I see that's what it is? Ignore case and global search together huh.\n\n\n### Functions \nThere's three functions in string operations where regexes are super helpful viz.\n- `match(/str1/)`: Finds a \"match\" for a string pattern.\n- `replace(/str1/, \"str2\")`: Finds a match and replace it with another string as the 2nd argument. \n- `test(/str1/)`: returns true/false for checking against a string pattern match.\n\nThese will be the most common used functions.\n\nRegular expressions also have a _Shorthand_ character classes, _Anchors_ \nand _Quantifiers_ which all help in simplifying the targetted expressions.\n\nWe'll see _Quantifiers_, _Anchors_ and _Shorthand_ character examples together.\n\n### Quantifiers  \nA quantifier quantifies, like how many times does a particular \"expression\" occur.\n\n| Quantifier  | Description  | \n|-------------|---------------------------------------------------|\n| `+`         | Plus indicates one-or-more  |\n| `*`         | Star says zero-or-more, basically optional as well - the greedy boy! | \n| `?`         | Question mark indicates, one-or-zero matches |\n| \\|         |  A logical OR ofcourse  | \n\n### Anchors\nRegular expressions also have anchor elements viz. \n\n| Anchors  | Description  | \n|----------|--------------|\n| `^`      | starts with  |\n| `$`      | ends with |\n\n### Shorthand Character classes\nCharacter classes are usually captured by surrounding them with square braces. \n\nIf you specify `^` inside the capture braces `[^xyz]` they'd stand for negation. Yes, negation! \nSo lets look at the character classes now:\n\nWords and digits: \n\n| Pattern  | Description  | \n|----------|---------------------------------------------------|\n| `[A-Z]`  | captures any captial alphabet between A to Z.     | \n| `[a-z]`  | captures any small letter alphabet between a to z  |\n| `[0-9]`  | any digit between 0 to 9. Short hand is `[\\d]` |\n| `[\\w]`   | captures any word, in totality it stands for `[a-zA-Z0-9]` |\n| `[\\W]`   | captures anything that's not a word, in totality it stands for `[^a-zA-Z0-9]` |\n| `[\\D]`   | Short hand for not a digit. |\n\nWhite-space stuff:\n\n| Pattern | Description  | \n|---------|---------------------------------------------------|\n| `[\\s]`  | captures any whitespace character.  |\n| `[\\S]`  | captures any non-whitespace character. |\n|  `.`    | any character of-course | \n\nNegation stuff: \n\n| Pattern    | Description  | \n|------------|---------------------------------------------------|\n| `[^abc]`   | would stand for not a, b, or c |\n| `[^apple]` | would stand for not the word apple but everything apart from that word. |\n\n#### Examples \n\nLet's start with words and digits: \n\nHere's lets say you just wanna match against finding the new bootstrap version?\nOr maybe you changed your mind are are looking for versions of frameworks \ni.e. words followed by numbers. Below are some examples illustrating the same: \n```javascript\nconst str0 = \"New Bootstrap5 is out. Older Boostrap4 isn't any good\";\nconsole.log(str0.match(/(Bootstrap\\d)/)); // \"Bootstrap5\"\nconsole.log(str0.match(/(\\w+\\d)/)); // \"Bootstrap5\"\nconsole.log(str0.match(/(\\w+\\d)/g)); // [\"Bootstrap5\", \"Bootstrap4\"]\n```\n\nHere goes the clique US telphone number regex: \n```javascript\nconst str0 = \n\"This is my nicely formatter number +1(123)-456-7890.\" +\n\"Also this can be it w/o the extension 123-456-7890.\"+\n\"Rightly, I can put braces & hypens wherever (123) 456-7890\" +\n\"Oh yeah, lets not forget w/o hypens: 123 456 7890\" + \n\"Or the way with periods in between like:123.456.7890\" + \n\"Gotta match'em all!\";\n\nstr0.match(/((\\+\\d{1,2})?(\\(?\\d{3}\\)?.?\\d{3}.?\\d{4}))/g);\n// [\"+1(123)-456-7890\", \"123-456-7890\", \"(123) 456-7890\", \"123 456 7890\", \"123.456.7890\"]\n```\n\nLet's break it down one by one. \n- `(\\+\\d{1,2})?`: Indicates the symbols `(` & `+` followed by a digit quantifying as occuring max twice.\nAnd the entire thing is optional since its followed by a `?` indicating 0,1 occurrences. \n- `\\(?\\d{3}\\)?`: Indicates the first and last round braces as being optional by using `\\(?`.\nThe first `\\` is the escape character used to implicitly say look for a round brace `(`. \nThe `\\d{3}` ofcourse says look for 3 digits.\n- `.?`: Here we're looking for an optional delimiter, like a space or `-` or `.`.\n- `\\d{3}`: Looking for the second set of 3 digits \n- `.?`: Another optional delimiter\n- `\\d{4}`: The last set of 4 digits to be captured. \n\nThe entire expression is surrounded by round braces to allow capturing the expression. \n\nAnd Voila! We have a regex capturing a phone-number, but its not free of bugs I'd assume. \n\n\nLet's try anchors. In the below example, raining ends with would match in L02 but \nin L03 it won't match rain as ending. We know ofcourse why. \n\n\n```javascript\nconst str1 = \"it was raining\";\nconsole.log(/raining$/.test(str1)); // true\nconsole.log(/rain$/.test(str1)); // false\n\nconsole.log(/^it/.test(str1)); // true\nconsole.log(/^was/.test(str1)); // false\n```\n\nHope those examples made sense.\n\n## Advanced Stuff\nLets start with Word Boundary and then go towards specific examples which I recently have written.\n\n### Word Boundary \n- `[\\b]`: the `b` here stands for word-boundary. \nWhich matches three things viz. A start of the sentence, end of sentence - since they \"boundaries\". \nAnd it matches end/start of a word - meaning:\n1. \"a place where the word can begin like with space\" \n2. \"a place where the word ends, like exclamation or another space\"\nLet's see with examples shall we. \n\n```javascript\nconsole.log(\"GO! Bananas, Monkey?\".match(/\\bMonkey\\b/)); // Monkey \nconsole.log(\"GO! Bananas, Monkey?\".match(/\\bMonke\\b/)); // null \nconsole.log(\"GO! Bananas, Monkey?\".match(/\\bGO\\b/)); // Go \nconsole.log(\"GO! Bananas, Monkey?\".match(/\\bBanana\\b/)); // null \n```\n\nAs you see in:\n- example 1: `Monkey` is matched, since its ending as \"word boundary\"\n- example 3: `GO` is matched, since its starting as \"word boundary\"\n- example 2/4: `Monke` & `Banana` both are NOT matched, since its not ending/starting with a boundary\n\nLet's take another example. Try capturing time from the below items, where time is a xx:yy two digit numbers:\n\n```javascript\nconst timestr1 = \"I drink coffee at 09:00 AM and try to finish by 11:00 AM.\" +\n\"Sometimes I even do an afternoon tea around 16:00.\"+ \n\"But tea at18:00isn't tea, is it? Nor is 123:456PM\" // ??\n```\n\nSo, looks like we are capturing two digits numbers which can be\ncaptured by `\\d` and quantifying them as `{2}` occurrences like `\\d{2}`. \nAnd seperate them with a `:`. Cool. How about avoid the 18:00 ü§î\n\nThe word boundary üòÆ that will do it! Putting it all together, it looks like so:\n\n```javascript\ntimestr1.match(/\\b\\d{2}:\\d{2}\\b/g)); \n// => [\"09:00\", \"11:00\", \"16:00\"]\n```\n\nWow üòÆ Or not yet?\n\n\n### The `new RegExp`\nIn basics, we talked about how there's yet another syntax for creating a regex. \n\nThis new method comes with its own pros and cons, lets do cons first: \nWe need to escape _Escape Characters_ like `\\ ^ * ( ) .` and more such stuff.\n\nBut this new expression, also allows variable substitution. \nWe'll first see how to escape characters and then try variable substitution.\n\nIf we want to re-write the time-regex, it'll need to escapse those `\\` characters:\n\n```javascript\nconst r = new RegExp(\"\\\\b\\\\d{2}:\\\\d{2}\\\\b\", \"g\");\nconsole.log(timestr1.match(r));\n// => [\"09:00\", \"11:00\", \"16:00\"]\n```\nNot pretty I know! The second argument for the RegExp constructor is the flags we allow in. \nIn the above example, its the globals flag to find all the time hours. \n\nLet's say we wanted to capture post fix for a set of distributed system \nnames. Really contrived example below, but stay with me. \n\nWe have lots of different systems. Each system has a unique ID\nwhich suffixed by a UUID, which is either a number/UUID.\n\ne.g.: `variable_1`, `distributedVariable_uu1_22d_334_d`, etc.\n\nLet's try and extract that UUID: \nWe know we're looking for a system name followed by the ID, let's make a postfix catcher?\n\n```typescript\nconst t1: string = \"controller_1\";\nconst t2: string = \"controller_uu1-4dd-3ee-41\";\nconst t3: string = \"controller_8\";\nconst t4: string = \"shard_1\";\nconst t5: string = \"shard_uu1-4dd-3ee-41\";\nconst t6: string = \"shard\";\nconst t7: string = \"shard_\";\n\nconst getUUID = (s: string, prefix: string): string => {\n  const match = s.match(new RegExp(`${prefix}_([a-zA-Z0-9\\-]+)$`));\n  return match && match[1];\n}\n\nconsole.log(getUUID(t1, \"controller\")); // => 1\nconsole.log(getUUID(t2, \"controller\")); // => uu1-4dd-3ee-41\nconsole.log(getUUID(t4, \"shard\")); // 1\nconsole.log(getUUID(t5, \"shard\")); //=> uu1-4dd-3ee-41\nconsole.log(getUUID(t6, \"shard\")); //=> null\nconsole.log(getUUID(t7, \"shard\")); //=> null\n```\n\nFound it useful? Still got more examples, hang tight! \n\nLet's say you got to parse filtering expression in log-query languages. \nWhat's that you'd ask? Well a super high level w/o going into the depths could be: \n\n> Every log-query languages being offered in logging solutions across the cloud providers have a way to expression their query and a filtering expression.\n\nLet's see with an example. Here we are searching \"logs\" and would like to capture the filter expressions into variables of \n\n| Name         | Description  | \n|--------------|---------------------------------------------------|\n| `FIELD_NAME` | field name or the column/key of the log |\n| `OP`         | operator viz. `=`, `=>`, `<=`, `>`, etc | \n| `VALUE`      | the value of the operator |\n\nExample 1: \n```bash\nsearch logs \nWHERE resource.type = \"my-instance\" \nAND type = ERROR \n```\n\nExample 2:\n```bash\nsearch logs2\nWHERE resource.type != \"API\"\nAND api.response.code = 400\n```\n\nThis is what we'll be extracting out of the two examples. \nI've called `1.1` and `1.2` for second value of expression filters. \n\n| Name         |   Example 1.1   |Example 1.2| Example 2.1 | Example 2.2 |\n|--------------|-----------------|-----------|-------------|-------------|\n| `FIELD_NAME` | `resource.type` | `type`    | `resource.type`|  `api.response.code`|\n| `OP`         | `=`             |  `=`      | `!=` | `!=` |\n| `VALUE`      | `\"my-instance\"` | `\"ERROR\"` | `API`| `400` |\n\nHow do we go about this. Let's start with operators since we know they'll be constants. \n```javascript\nconst OPERATORS = \"=|>=|<=|!=|>|<\";\n```\n\nNext what do we allow for values? Everything? Lets use the greedy capturing mechanism?\nSomething like `.*` should work fine, looks, like quotes are optional. \n\nSurely we'll factor that in.\n\nHow about anything except whitespace? like `[^\\\\s]+`\n\nHow can we capture the fieldName? Looks like it can constain periods or other special stuff - lets try \n`[a-zA-Z\\.\\_]+`? ü§î How does it matter what the fieldName is? \n\nCan I just say anything except operators? like `[^${OPERATORS}]`\n\nSo our final regex should capture specific groups like __fieldName__, __op__ & __value__ .\nTo capture those we'll use the round braces `()`. \n\nAnd it looks like so: \n\n```javascript\nnew RegExp(`([^${OPERATORS}]+)(${OPERATORS})([^\\\\s]+)`)\n```\n\n- `([^${OPERATORS}]+)`: captures anything except operators\n- `([${OPERATORS}])`: captures a single operator\n- `([^\\\\s]+)`: captures everything except whitespace.\n\nBoom! üí•\n\nFor the sake of the example, we'll consider nothing comes after the filters \nand **WHERE** is the keyword specifying the start of it.\n\nLet's put all that together and try it:\n\n```javascript\nconst q1: string = `search logs2 WHERE resource.type != \"API\" AND api.response.code = 400`;\nconst q2: string = `search logs WHERE resource.type = \"my-instance\" AND type = ERROR `;\nconst q3: string = `search logs WHERE resource__type = \"my-instance\" AND type = ERROR `;\n\nconst WHERE: string = \"WHERE\";\nconst AND: string = \"AND\";\nconst OPERATORS = \"=|>=|<=|!=|>|<\";\n\ninterface Filter {\n  fieldName: string;\n  op: string;\n  value: string;\n}\n\nconst regex = new RegExp(`([^${OPERATORS}]+)(${OPERATORS})([^\\\\s]+)`)\nconst parseFilter = (q: string): Filter[] => {\n  const filters = q.split(WHERE);\n  if (!filters || filters.length < 2) return [];\n\n  const filterStr = filters[1];\n\n  return filterStr.split(AND).reduce((prev, curr) => {\n    const strippedCurrent = curr.replace(/ /g, \"\");\n    const [match, fieldName, op, value] = strippedCurrent.match(regex)\n    if (!match) return prev;\n\n    const filter: Filter = {\n      fieldName, op, value\n    };\n\n    return [...prev, filter];\n  }, []);\n}\n\nconsole.log(parseFilter(q1)); \n/**\n * => [ \n *  { fieldName: 'resource.type', op: '!=', value: '\"API\"' },‚Äà\n *  { fieldName: 'api.response.code', op: '=', value: '400' } \n * ]‚Äà\n *  */ \nconsole.log(parseFilter(q2)); \n/**\n * [ \n *  { fieldName: 'resource.type', op: '=', value: '\"my-instance\"' },‚Äà\n *  { fieldName: 'type', op: '=', value: 'ERROR' } \n * ]‚Äà\n */\nconsole.log(parseFilter(q3)); // => \n/**\n * [ \n *  { fieldName: 'resource__type', op: '=', value: '\"my-instance\"' },\n *  { fieldName: 'type', op: '=', value: 'ERROR' } \n * ]‚Äà\n */\n```\n\nI might add more advanced specific examples as I come across, but hopefully you found that useful. \n\n\n## Future Stuff\nI did a lot of multiline regex when I was an intern to play with logstash \nand capturing the right amount of data from logs, but honestly I don't remember \nthose examples, except them being really cool üòé\n\nAlso, I haven't played much with substitution and look-around regex stuff,\nbut if I do - I'll update this post :) \n\nUntil next time ‚òÆÔ∏è\n","excerpt":"Everyone has used regular expressions sometime of life to check validation of strings or you know capture a particular group of text you might be‚Ä¶","frontmatter":{"path":"/regular-expressions","type":"blog","date":"Feb 20, 2020","title":"Regular Expressions"}}},{"node":{"id":"7f28ebcf-5d2f-5924-9bd5-8036984e587c","body":"\nI was recently trying to make a simple countdown timer which counts from a specific time-interval and ‚Äúfinishes‚Äù itself.\n\nI just found it amazing that a few lines of code could bring in such a thing!\nthe code just uses a state called ‚Äúminutes‚Äù which gets initialized with the total number of seconds for which the timer stays.\n\nThe component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.\n\n```jsx\n<Timer classNames=\"time-text\" minutes={Number(10)} />\n```\n\nAnd here‚Äôs the entire code.\n\n```jsx\nimport React, { Fragment, useState, useEffect } from \"react\";\n\nconst Timer = ({ minutes, classNames }) => {\n  if (!minutes) return null;\n\n  const [seconds, setSeconds] = useState(minutes * 60);\n\n  useEffect(() => {\n    let timeout = setInterval(() => {\n      setSeconds(seconds - 1);\n    }, 1000);\n\n    if (seconds < 0) {\n      clearTimeout(timeout);\n    }\n\n    return () => {\n      clearInterval(timeout);\n    };\n  }, [seconds]);\n\n  const showMins = Math.floor(seconds / 60);\n  const showSeconds = seconds % 60;\n\n  const PadString = ({ number }) => String(number).padStart(2, \"0\");\n\n  if ((!showMins && !showSeconds) || showMins < 0)\n    return <span className={classNames}>Complete!</span>;\n\n  return (\n    <Fragment>\n      <span className={classNames}>\n        <PadString number={showMins} />:<PadString number={showSeconds} />\n      </span>{\" \"}\n      remaining\n    </Fragment>\n  );\n};\n\nexport default Timer;\n```\n\n![count-down-timer](/blog/simple-count-downtimer/count-down-timer.gif)\n\nAnd below's a codepen link:\n\nhttps://codepen.io/dixitk13/pen/WNQPKye\n","excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and ‚Äúfinishes‚Äù itself. I just found it amazing that‚Ä¶","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple countdown timer"}}},{"node":{"id":"cabe11ee-61b8-5105-b8b9-98220edb4708","body":"\nThe entire world is hooked on messaging and being connected digitally.\nOur world revolves around notifications and checking them or needing to check them due to on-call duties or maybe you are just the kind of person who replies to chats instantly.\n\nThe notification sound of iMessage is just iconic or has become iconic. But do multiple notifications irritate you?\n\nDo you get irritated by 5 notifications grouped under the same application by a single friend of yours?\n\n## Scenario 1\n\n```\n[10:15 AM] John Parker: Hi Dixit\n[10:15 AM] John Parker: About that PR\n[10:16 AM] John Parker: Did you get a chance to look at it\n[10:16 AM] John Parker: ?\n[10:17 AM] John Parker: Its just a small change from the ticket TKT-123\n[10:17 AM] John Parker: Here's a link for the same\n[10:18 AM] John Parker: https://github.com/TKT/pulls/321\n[10:20 AM] Dixit Patel: Nope, totally forgot. Lemme do it right away!\n[10:25 AM] John Parker: Also, that PR doesn't fix 123 completely,\n[10:25 AM] John Parker: its a sub-task\n[10:25 AM] John Parker: jira stuff you know ...\n[10:26 AM] John Parker: but boss signed off\n[10:26 AM] John Parker: gotta ship it\n[10:30 AM] Dixit Patel: Right, on it.\n```\n\n> I do! There, I said it! üôà\n\nMost of people in this world might have used one or another form of chat/messaging\nlike iMessage, Jabber, Slack, Teams, etc. Today, at most workplaces messaging is an essential part of communication for most people working w/ each other.\n\nSoftware engineers all have a habit of writing code and\nusing the most popular version control to manage their code called GIT.\n\nCan you follow that with your chats? - Absolutely!\n\nHere's what I do, or rather how my pings look like:\n\n```\n[10:15 AM] Dixit: Hi John, about that PR, did you get a\nchance to look at it? Its just a small change from the\nticket TKT-123. Here's a link for the same:\nhttps://github.com/TKT/pulls/321\n```\n\nFurther on if John wants to say \"He's looking at it\", he either reacts with\nan \"ACK\" reaction/emoji on the same message or says in a straight one liner,\nand the conversation could maybe be something like:\n\n## Scenario 2\n\n```\n[10:15 AM] Dixit Patel: Hi John, about that PR, did you get a\nchance to look at it? Its just a small change from the\nticket TKT-123. Here's a link for the same:\nhttps://github.com/TKT/pulls/321 <üëå>\n\n[10:16 AM] John Parker: Nah, I didn't get a chance mate.\nLemme do that right away.\n\n[10:17 AM] Dixit Patel: Also, that PR doesn't completely fix TKT-123, but\nattempts a sub-task for it. Boss says ship it and complete the TKT-123\nlater in the day.\n\n[10:18 AM] John Parker: Right, on it. Also The TKT-331 kinda\nneeds some priority. Seems to me like its breaking on\nChrome 83 due to downloads being blocked in iframe,\nbefore customers report. Should be a small fix.\n```\n\nNow one would ask, what does this benefit me with?\n\nWell, I'll say why maintain commit history with 52th word mark and wrap the rest of the commit message at 72th word mark?\n\n## üìú HISTORY üìú\n\nIts's a powerful thing. Commit history is a very important thing!\nIt helps understand the how the code has been developing and what churn has\nbeen happening in the codebase, etc etc.\n\nTo me scenario 1 looks like a commit history which is shown below:\n\n```\n* 5d53d5a - complete\n* 3b97cf3 - wip\n* 8c2e4b8 - pull from master\n* 4407227 - boss called wip\n* 70cdc42 - typo\n* 329f368 - fix padding/margin\n* 18007ad - #ABC321 in progress\n```\n\nWhere as the scenario 2 looks like:\n\n```\n* 6e53924 - Fix TKT-333 bug found via review w/ @jparker\n* 844b34c - Fix TKT-331 chrome 83 iframe download\n* 57152ff - Feat TKT-322 allowing i18n for only the menus\n```\n\nWhich one do you like more? Retrospection is the key, scroll two pages up and\nyou'll have conversations which kinda helps remember the status of things.\n\nUse threads.\nThreads will let you condense/group those conversations into singular items.\n\nTogether we can make \"chat-history-great\"!üçª\n","excerpt":"The entire world is hooked on messaging and being connected digitally. Our world revolves around notifications and checking them or needing to check‚Ä¶","frontmatter":{"path":"/one-liner-chats","type":"blog","date":"Jan 10, 2019","title":"One liner chats?"}}}],"totalCount":8}}}